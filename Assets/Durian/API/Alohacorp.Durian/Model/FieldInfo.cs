/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// FieldInfo
    /// </summary>
    [DataContract(Name = "FieldInfo")]
    public partial class FieldInfo
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldInfo" /> class.
        /// </summary>
        /// <param name="field">field.</param>
        /// <param name="name">name.</param>
        /// <param name="classInfo">classInfo.</param>
        /// <param name="primitive">primitive.</param>
        /// <param name="genericType">genericType.</param>
        /// <param name="final">final.</param>
        /// <param name="tersMethodForField">tersMethodForField.</param>
        public FieldInfo(FieldInfoField field = default(FieldInfoField), string name = default(string), ClassInfo classInfo = default(ClassInfo), bool primitive = default(bool), FieldInfoFieldGenericType genericType = default(FieldInfoFieldGenericType), bool final = default(bool), List<FieldInfoTersMethodForFieldInner> tersMethodForField = default(List<FieldInfoTersMethodForFieldInner>))
        {
            this.Field = field;
            this.Name = name;
            this.ClassInfo = classInfo;
            this.Primitive = primitive;
            this.GenericType = genericType;
            this.Final = final;
            this.TersMethodForField = tersMethodForField;
        }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name = "field", EmitDefaultValue = false)]
        public FieldInfoField Field { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ClassInfo
        /// </summary>
        [DataMember(Name = "classInfo", EmitDefaultValue = false)]
        public ClassInfo ClassInfo { get; set; }

        /// <summary>
        /// Gets or Sets Primitive
        /// </summary>
        [DataMember(Name = "primitive", EmitDefaultValue = true)]
        public bool Primitive { get; set; }

        /// <summary>
        /// Gets or Sets GenericType
        /// </summary>
        [DataMember(Name = "genericType", EmitDefaultValue = false)]
        public FieldInfoFieldGenericType GenericType { get; set; }

        /// <summary>
        /// Gets or Sets Final
        /// </summary>
        [DataMember(Name = "final", EmitDefaultValue = true)]
        public bool Final { get; set; }

        /// <summary>
        /// Gets or Sets TersMethodForField
        /// </summary>
        [DataMember(Name = "tersMethodForField", EmitDefaultValue = false)]
        public List<FieldInfoTersMethodForFieldInner> TersMethodForField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FieldInfo {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ClassInfo: ").Append(ClassInfo).Append("\n");
            sb.Append("  Primitive: ").Append(Primitive).Append("\n");
            sb.Append("  GenericType: ").Append(GenericType).Append("\n");
            sb.Append("  Final: ").Append(Final).Append("\n");
            sb.Append("  TersMethodForField: ").Append(TersMethodForField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
