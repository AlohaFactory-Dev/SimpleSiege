/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// ChatMessageDto
    /// </summary>
    [DataContract(Name = "ChatMessageDto")]
    public partial class ChatMessageDto
    {
        /// <summary>
        /// Defines MessageType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageTypeEnum
        {
            /// <summary>
            /// Enum PLAYER for value: PLAYER
            /// </summary>
            [EnumMember(Value = "PLAYER")]
            PLAYER = 1,

            /// <summary>
            /// Enum SYSTEM for value: SYSTEM
            /// </summary>
            [EnumMember(Value = "SYSTEM")]
            SYSTEM = 2,

            /// <summary>
            /// Enum ADMIN for value: ADMIN
            /// </summary>
            [EnumMember(Value = "ADMIN")]
            ADMIN = 3
        }


        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [DataMember(Name = "messageType", IsRequired = true, EmitDefaultValue = true)]
        public MessageTypeEnum MessageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatMessageDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChatMessageDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatMessageDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="chatRoomId">chatRoomId (required).</param>
        /// <param name="message">message (required).</param>
        /// <param name="chatChannelId">chatChannelId (required).</param>
        /// <param name="senderUid">senderUid.</param>
        /// <param name="messageType">messageType (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="sender">sender.</param>
        /// <param name="receiptId">receiptId.</param>
        public ChatMessageDto(string id = default(string), string chatRoomId = default(string), string message = default(string), string chatChannelId = default(string), string senderUid = default(string), MessageTypeEnum messageType = default(MessageTypeEnum), long? createdAt = default(long?), ChatMessagePlayer sender = default(ChatMessagePlayer), string receiptId = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ChatMessageDto and cannot be null");
            }
            this.Id = id;
            // to ensure "chatRoomId" is required (not null)
            if (chatRoomId == null)
            {
                throw new ArgumentNullException("chatRoomId is a required property for ChatMessageDto and cannot be null");
            }
            this.ChatRoomId = chatRoomId;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for ChatMessageDto and cannot be null");
            }
            this.Message = message;
            // to ensure "chatChannelId" is required (not null)
            if (chatChannelId == null)
            {
                throw new ArgumentNullException("chatChannelId is a required property for ChatMessageDto and cannot be null");
            }
            this.ChatChannelId = chatChannelId;
            this.MessageType = messageType;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for ChatMessageDto and cannot be null");
            }
            this.CreatedAt = createdAt;
            this.SenderUid = senderUid;
            this.Sender = sender;
            this.ReceiptId = receiptId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ChatRoomId
        /// </summary>
        [DataMember(Name = "chatRoomId", IsRequired = true, EmitDefaultValue = true)]
        public string ChatRoomId { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets ChatChannelId
        /// </summary>
        [DataMember(Name = "chatChannelId", IsRequired = true, EmitDefaultValue = true)]
        public string ChatChannelId { get; set; }

        /// <summary>
        /// Gets or Sets SenderUid
        /// </summary>
        [DataMember(Name = "senderUid", EmitDefaultValue = false)]
        public string SenderUid { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public long? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name = "sender", EmitDefaultValue = false)]
        public ChatMessagePlayer Sender { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptId
        /// </summary>
        [DataMember(Name = "receiptId", EmitDefaultValue = false)]
        public string ReceiptId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChatMessageDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ChatRoomId: ").Append(ChatRoomId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ChatChannelId: ").Append(ChatChannelId).Append("\n");
            sb.Append("  SenderUid: ").Append(SenderUid).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  ReceiptId: ").Append(ReceiptId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
