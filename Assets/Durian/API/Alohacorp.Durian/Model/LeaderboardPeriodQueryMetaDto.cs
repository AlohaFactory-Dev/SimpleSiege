/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// LeaderboardPeriodQueryMetaDto
    /// </summary>
    [DataContract(Name = "LeaderboardPeriodQueryMetaDto")]
    public partial class LeaderboardPeriodQueryMetaDto
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardPeriodQueryMetaDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LeaderboardPeriodQueryMetaDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardPeriodQueryMetaDto" /> class.
        /// </summary>
        /// <param name="leaderboardId">leaderboardId (required).</param>
        /// <param name="periodId">periodId (required).</param>
        /// <param name="offset">offset.</param>
        /// <param name="limit">limit.</param>
        /// <param name="score">score.</param>
        /// <param name="participantId">participantId.</param>
        /// <param name="gap">gap.</param>
        /// <param name="totalCount">totalCount.</param>
        /// <param name="leaderboard">leaderboard.</param>
        /// <param name="period">period.</param>
        public LeaderboardPeriodQueryMetaDto(string leaderboardId = default(string), string periodId = default(string), int? offset = default(int?), int? limit = default(int?), decimal? score = default(decimal?), string participantId = default(string), int? gap = default(int?), int? totalCount = default(int?), LeaderboardDto leaderboard = default(LeaderboardDto), LeaderboardPeriodDto period = default(LeaderboardPeriodDto))
        {
            // to ensure "leaderboardId" is required (not null)
            if (leaderboardId == null)
            {
                throw new ArgumentNullException("leaderboardId is a required property for LeaderboardPeriodQueryMetaDto and cannot be null");
            }
            this.LeaderboardId = leaderboardId;
            // to ensure "periodId" is required (not null)
            if (periodId == null)
            {
                throw new ArgumentNullException("periodId is a required property for LeaderboardPeriodQueryMetaDto and cannot be null");
            }
            this.PeriodId = periodId;
            this.Offset = offset;
            this.Limit = limit;
            this.Score = score;
            this.ParticipantId = participantId;
            this.Gap = gap;
            this.TotalCount = totalCount;
            this.Leaderboard = leaderboard;
            this.Period = period;
        }

        /// <summary>
        /// Gets or Sets LeaderboardId
        /// </summary>
        [DataMember(Name = "leaderboardId", IsRequired = true, EmitDefaultValue = true)]
        public string LeaderboardId { get; set; }

        /// <summary>
        /// Gets or Sets PeriodId
        /// </summary>
        [DataMember(Name = "periodId", IsRequired = true, EmitDefaultValue = true)]
        public string PeriodId { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public int? Offset { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int? Limit { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public decimal? Score { get; set; }

        /// <summary>
        /// Gets or Sets ParticipantId
        /// </summary>
        [DataMember(Name = "participantId", EmitDefaultValue = false)]
        public string ParticipantId { get; set; }

        /// <summary>
        /// Gets or Sets Gap
        /// </summary>
        [DataMember(Name = "gap", EmitDefaultValue = false)]
        public int? Gap { get; set; }

        /// <summary>
        /// Gets or Sets TotalCount
        /// </summary>
        [DataMember(Name = "totalCount", EmitDefaultValue = false)]
        public int? TotalCount { get; set; }

        /// <summary>
        /// Gets or Sets Leaderboard
        /// </summary>
        [DataMember(Name = "leaderboard", EmitDefaultValue = false)]
        public LeaderboardDto Leaderboard { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", EmitDefaultValue = false)]
        public LeaderboardPeriodDto Period { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LeaderboardPeriodQueryMetaDto {\n");
            sb.Append("  LeaderboardId: ").Append(LeaderboardId).Append("\n");
            sb.Append("  PeriodId: ").Append(PeriodId).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  ParticipantId: ").Append(ParticipantId).Append("\n");
            sb.Append("  Gap: ").Append(Gap).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  Leaderboard: ").Append(Leaderboard).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
