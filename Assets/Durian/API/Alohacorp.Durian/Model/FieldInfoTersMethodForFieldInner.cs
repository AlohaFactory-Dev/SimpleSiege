/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// FieldInfoTersMethodForFieldInner
    /// </summary>
    [DataContract(Name = "FieldInfo_tersMethodForField_inner")]
    public partial class FieldInfoTersMethodForFieldInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldInfoTersMethodForFieldInner" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="modifiers">modifiers.</param>
        /// <param name="typeParameters">typeParameters.</param>
        /// <param name="synthetic">synthetic.</param>
        /// <param name="declaredAnnotations">declaredAnnotations.</param>
        /// <param name="accessible">accessible.</param>
        /// <param name="varArgs">varArgs.</param>
        /// <param name="parameterCount">parameterCount.</param>
        /// <param name="parameterAnnotations">parameterAnnotations.</param>
        /// <param name="genericReturnType">genericReturnType.</param>
        /// <param name="genericParameterTypes">genericParameterTypes.</param>
        /// <param name="genericExceptionTypes">genericExceptionTypes.</param>
        /// <param name="varDefault">varDefault.</param>
        /// <param name="bridge">bridge.</param>
        /// <param name="defaultValue">defaultValue.</param>
        /// <param name="annotatedReturnType">annotatedReturnType.</param>
        /// <param name="annotatedParameterTypes">annotatedParameterTypes.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="annotatedReceiverType">annotatedReceiverType.</param>
        /// <param name="annotatedExceptionTypes">annotatedExceptionTypes.</param>
        /// <param name="annotations">annotations.</param>
        public FieldInfoTersMethodForFieldInner(string name = default(string), int? modifiers = default(int?), List<FieldInfoTersMethodForFieldInnerTypeParametersInner> typeParameters = default(List<FieldInfoTersMethodForFieldInnerTypeParametersInner>), bool synthetic = default(bool), List<Object> declaredAnnotations = default(List<Object>), bool accessible = default(bool), bool varArgs = default(bool), int? parameterCount = default(int?), List<List<Object>> parameterAnnotations = default(List<List<Object>>), FieldInfoFieldGenericType genericReturnType = default(FieldInfoFieldGenericType), List<FieldInfoFieldGenericType> genericParameterTypes = default(List<FieldInfoFieldGenericType>), List<FieldInfoFieldGenericType> genericExceptionTypes = default(List<FieldInfoFieldGenericType>), bool varDefault = default(bool), bool bridge = default(bool), Object defaultValue = default(Object), FieldInfoFieldAnnotatedType annotatedReturnType = default(FieldInfoFieldAnnotatedType), List<FieldInfoFieldAnnotatedType> annotatedParameterTypes = default(List<FieldInfoFieldAnnotatedType>), List<FieldInfoTersMethodForFieldInnerParametersInner> parameters = default(List<FieldInfoTersMethodForFieldInnerParametersInner>), FieldInfoFieldAnnotatedType annotatedReceiverType = default(FieldInfoFieldAnnotatedType), List<FieldInfoFieldAnnotatedType> annotatedExceptionTypes = default(List<FieldInfoFieldAnnotatedType>), List<Object> annotations = default(List<Object>))
        {
            this.Name = name;
            this.Modifiers = modifiers;
            this.TypeParameters = typeParameters;
            this.Synthetic = synthetic;
            this.DeclaredAnnotations = declaredAnnotations;
            this.Accessible = accessible;
            this.VarArgs = varArgs;
            this.ParameterCount = parameterCount;
            this.ParameterAnnotations = parameterAnnotations;
            this.GenericReturnType = genericReturnType;
            this.GenericParameterTypes = genericParameterTypes;
            this.GenericExceptionTypes = genericExceptionTypes;
            this.Default = varDefault;
            this.Bridge = bridge;
            this.DefaultValue = defaultValue;
            this.AnnotatedReturnType = annotatedReturnType;
            this.AnnotatedParameterTypes = annotatedParameterTypes;
            this.Parameters = parameters;
            this.AnnotatedReceiverType = annotatedReceiverType;
            this.AnnotatedExceptionTypes = annotatedExceptionTypes;
            this.Annotations = annotations;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Modifiers
        /// </summary>
        [DataMember(Name = "modifiers", EmitDefaultValue = false)]
        public int? Modifiers { get; set; }

        /// <summary>
        /// Gets or Sets TypeParameters
        /// </summary>
        [DataMember(Name = "typeParameters", EmitDefaultValue = false)]
        public List<FieldInfoTersMethodForFieldInnerTypeParametersInner> TypeParameters { get; set; }

        /// <summary>
        /// Gets or Sets Synthetic
        /// </summary>
        [DataMember(Name = "synthetic", EmitDefaultValue = true)]
        public bool Synthetic { get; set; }

        /// <summary>
        /// Gets or Sets DeclaredAnnotations
        /// </summary>
        [DataMember(Name = "declaredAnnotations", EmitDefaultValue = false)]
        public List<Object> DeclaredAnnotations { get; set; }

        /// <summary>
        /// Gets or Sets Accessible
        /// </summary>
        [DataMember(Name = "accessible", EmitDefaultValue = true)]
        [Obsolete]
        public bool Accessible { get; set; }

        /// <summary>
        /// Gets or Sets VarArgs
        /// </summary>
        [DataMember(Name = "varArgs", EmitDefaultValue = true)]
        public bool VarArgs { get; set; }

        /// <summary>
        /// Gets or Sets ParameterCount
        /// </summary>
        [DataMember(Name = "parameterCount", EmitDefaultValue = false)]
        public int? ParameterCount { get; set; }

        /// <summary>
        /// Gets or Sets ParameterAnnotations
        /// </summary>
        [DataMember(Name = "parameterAnnotations", EmitDefaultValue = false)]
        public List<List<Object>> ParameterAnnotations { get; set; }

        /// <summary>
        /// Gets or Sets GenericReturnType
        /// </summary>
        [DataMember(Name = "genericReturnType", EmitDefaultValue = false)]
        public FieldInfoFieldGenericType GenericReturnType { get; set; }

        /// <summary>
        /// Gets or Sets GenericParameterTypes
        /// </summary>
        [DataMember(Name = "genericParameterTypes", EmitDefaultValue = false)]
        public List<FieldInfoFieldGenericType> GenericParameterTypes { get; set; }

        /// <summary>
        /// Gets or Sets GenericExceptionTypes
        /// </summary>
        [DataMember(Name = "genericExceptionTypes", EmitDefaultValue = false)]
        public List<FieldInfoFieldGenericType> GenericExceptionTypes { get; set; }

        /// <summary>
        /// Gets or Sets Default
        /// </summary>
        [DataMember(Name = "default", EmitDefaultValue = true)]
        public bool Default { get; set; }

        /// <summary>
        /// Gets or Sets Bridge
        /// </summary>
        [DataMember(Name = "bridge", EmitDefaultValue = true)]
        public bool Bridge { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name = "defaultValue", EmitDefaultValue = true)]
        public Object DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets AnnotatedReturnType
        /// </summary>
        [DataMember(Name = "annotatedReturnType", EmitDefaultValue = false)]
        public FieldInfoFieldAnnotatedType AnnotatedReturnType { get; set; }

        /// <summary>
        /// Gets or Sets AnnotatedParameterTypes
        /// </summary>
        [DataMember(Name = "annotatedParameterTypes", EmitDefaultValue = false)]
        public List<FieldInfoFieldAnnotatedType> AnnotatedParameterTypes { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public List<FieldInfoTersMethodForFieldInnerParametersInner> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets AnnotatedReceiverType
        /// </summary>
        [DataMember(Name = "annotatedReceiverType", EmitDefaultValue = false)]
        public FieldInfoFieldAnnotatedType AnnotatedReceiverType { get; set; }

        /// <summary>
        /// Gets or Sets AnnotatedExceptionTypes
        /// </summary>
        [DataMember(Name = "annotatedExceptionTypes", EmitDefaultValue = false)]
        public List<FieldInfoFieldAnnotatedType> AnnotatedExceptionTypes { get; set; }

        /// <summary>
        /// Gets or Sets Annotations
        /// </summary>
        [DataMember(Name = "annotations", EmitDefaultValue = false)]
        public List<Object> Annotations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FieldInfoTersMethodForFieldInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Modifiers: ").Append(Modifiers).Append("\n");
            sb.Append("  TypeParameters: ").Append(TypeParameters).Append("\n");
            sb.Append("  Synthetic: ").Append(Synthetic).Append("\n");
            sb.Append("  DeclaredAnnotations: ").Append(DeclaredAnnotations).Append("\n");
            sb.Append("  Accessible: ").Append(Accessible).Append("\n");
            sb.Append("  VarArgs: ").Append(VarArgs).Append("\n");
            sb.Append("  ParameterCount: ").Append(ParameterCount).Append("\n");
            sb.Append("  ParameterAnnotations: ").Append(ParameterAnnotations).Append("\n");
            sb.Append("  GenericReturnType: ").Append(GenericReturnType).Append("\n");
            sb.Append("  GenericParameterTypes: ").Append(GenericParameterTypes).Append("\n");
            sb.Append("  GenericExceptionTypes: ").Append(GenericExceptionTypes).Append("\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("  Bridge: ").Append(Bridge).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  AnnotatedReturnType: ").Append(AnnotatedReturnType).Append("\n");
            sb.Append("  AnnotatedParameterTypes: ").Append(AnnotatedParameterTypes).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  AnnotatedReceiverType: ").Append(AnnotatedReceiverType).Append("\n");
            sb.Append("  AnnotatedExceptionTypes: ").Append(AnnotatedExceptionTypes).Append("\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
