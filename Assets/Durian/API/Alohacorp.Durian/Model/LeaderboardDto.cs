/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// LeaderboardDto
    /// </summary>
    [DataContract(Name = "LeaderboardDto")]
    public partial class LeaderboardDto
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum GENERAL for value: GENERAL
            /// </summary>
            [EnumMember(Value = "GENERAL")]
            GENERAL = 1,

            /// <summary>
            /// Enum INSTANT for value: INSTANT
            /// </summary>
            [EnumMember(Value = "INSTANT")]
            INSTANT = 2
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Defines ParticipantType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ParticipantTypeEnum
        {
            /// <summary>
            /// Enum PLAYER for value: PLAYER
            /// </summary>
            [EnumMember(Value = "PLAYER")]
            PLAYER = 1,

            /// <summary>
            /// Enum GUILD for value: GUILD
            /// </summary>
            [EnumMember(Value = "GUILD")]
            GUILD = 2
        }


        /// <summary>
        /// Gets or Sets ParticipantType
        /// </summary>
        [DataMember(Name = "participantType", IsRequired = true, EmitDefaultValue = true)]
        public ParticipantTypeEnum ParticipantType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LeaderboardDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="participantType">participantType (required).</param>
        /// <param name="targetPlayerFilterStack">targetPlayerFilterStack.</param>
        /// <param name="resetRule">resetRule.</param>
        /// <param name="isActive">isActive (required).</param>
        /// <param name="description">description.</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        /// <param name="instantPeriod">instantPeriod.</param>
        public LeaderboardDto(string id = default(string), string name = default(string), TypeEnum type = default(TypeEnum), ParticipantTypeEnum participantType = default(ParticipantTypeEnum), PlayerFilterStack targetPlayerFilterStack = default(PlayerFilterStack), LeaderboardResetRuleDto resetRule = default(LeaderboardResetRuleDto), bool isActive = default(bool), string description = default(string), long? createdAt = default(long?), long? updatedAt = default(long?), LeaderboardPeriodDto instantPeriod = default(LeaderboardPeriodDto))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for LeaderboardDto and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for LeaderboardDto and cannot be null");
            }
            this.Name = name;
            this.Type = type;
            this.ParticipantType = participantType;
            this.IsActive = isActive;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for LeaderboardDto and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new ArgumentNullException("updatedAt is a required property for LeaderboardDto and cannot be null");
            }
            this.UpdatedAt = updatedAt;
            this.TargetPlayerFilterStack = targetPlayerFilterStack;
            this.ResetRule = resetRule;
            this.Description = description;
            this.InstantPeriod = instantPeriod;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TargetPlayerFilterStack
        /// </summary>
        [DataMember(Name = "targetPlayerFilterStack", EmitDefaultValue = false)]
        public PlayerFilterStack TargetPlayerFilterStack { get; set; }

        /// <summary>
        /// Gets or Sets ResetRule
        /// </summary>
        [DataMember(Name = "resetRule", EmitDefaultValue = false)]
        public LeaderboardResetRuleDto ResetRule { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "isActive", IsRequired = true, EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public long? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public long? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets InstantPeriod
        /// </summary>
        [DataMember(Name = "instantPeriod", EmitDefaultValue = false)]
        public LeaderboardPeriodDto InstantPeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LeaderboardDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ParticipantType: ").Append(ParticipantType).Append("\n");
            sb.Append("  TargetPlayerFilterStack: ").Append(TargetPlayerFilterStack).Append("\n");
            sb.Append("  ResetRule: ").Append(ResetRule).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  InstantPeriod: ").Append(InstantPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
