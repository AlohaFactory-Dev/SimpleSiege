/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// LeaderboardPeriodDto
    /// </summary>
    [DataContract(Name = "LeaderboardPeriodDto")]
    public partial class LeaderboardPeriodDto
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 1,

            /// <summary>
            /// Enum PREPARING for value: PREPARING
            /// </summary>
            [EnumMember(Value = "PREPARING")]
            PREPARING = 2,

            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 3,

            /// <summary>
            /// Enum CALCULATING for value: CALCULATING
            /// </summary>
            [EnumMember(Value = "CALCULATING")]
            CALCULATING = 4,

            /// <summary>
            /// Enum FINISHED for value: FINISHED
            /// </summary>
            [EnumMember(Value = "FINISHED")]
            FINISHED = 5
        }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardPeriodDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LeaderboardPeriodDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardPeriodDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="leaderboardId">leaderboardId (required).</param>
        /// <param name="resetRule">resetRule.</param>
        /// <param name="startAt">startAt (required).</param>
        /// <param name="endAt">endAt (required).</param>
        /// <param name="previousPeriodId">previousPeriodId.</param>
        /// <param name="state">state (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="leaderboard">leaderboard.</param>
        /// <param name="previousPeriod">previousPeriod.</param>
        public LeaderboardPeriodDto(string id = default(string), string leaderboardId = default(string), LeaderboardResetRuleDto resetRule = default(LeaderboardResetRuleDto), long? startAt = default(long?), long? endAt = default(long?), string previousPeriodId = default(string), StateEnum state = default(StateEnum), long? createdAt = default(long?), Object leaderboard = default(Object), Object previousPeriod = default(Object))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for LeaderboardPeriodDto and cannot be null");
            }
            this.Id = id;
            // to ensure "leaderboardId" is required (not null)
            if (leaderboardId == null)
            {
                throw new ArgumentNullException("leaderboardId is a required property for LeaderboardPeriodDto and cannot be null");
            }
            this.LeaderboardId = leaderboardId;
            // to ensure "startAt" is required (not null)
            if (startAt == null)
            {
                throw new ArgumentNullException("startAt is a required property for LeaderboardPeriodDto and cannot be null");
            }
            this.StartAt = startAt;
            // to ensure "endAt" is required (not null)
            if (endAt == null)
            {
                throw new ArgumentNullException("endAt is a required property for LeaderboardPeriodDto and cannot be null");
            }
            this.EndAt = endAt;
            this.State = state;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for LeaderboardPeriodDto and cannot be null");
            }
            this.CreatedAt = createdAt;
            this.ResetRule = resetRule;
            this.PreviousPeriodId = previousPeriodId;
            this.Leaderboard = leaderboard;
            this.PreviousPeriod = previousPeriod;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LeaderboardId
        /// </summary>
        [DataMember(Name = "leaderboardId", IsRequired = true, EmitDefaultValue = true)]
        public string LeaderboardId { get; set; }

        /// <summary>
        /// Gets or Sets ResetRule
        /// </summary>
        [DataMember(Name = "resetRule", EmitDefaultValue = false)]
        public LeaderboardResetRuleDto ResetRule { get; set; }

        /// <summary>
        /// Gets or Sets StartAt
        /// </summary>
        [DataMember(Name = "startAt", IsRequired = true, EmitDefaultValue = true)]
        public long? StartAt { get; set; }

        /// <summary>
        /// Gets or Sets EndAt
        /// </summary>
        [DataMember(Name = "endAt", IsRequired = true, EmitDefaultValue = true)]
        public long? EndAt { get; set; }

        /// <summary>
        /// Gets or Sets PreviousPeriodId
        /// </summary>
        [DataMember(Name = "previousPeriodId", EmitDefaultValue = false)]
        public string PreviousPeriodId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public long? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Leaderboard
        /// </summary>
        [DataMember(Name = "leaderboard", EmitDefaultValue = true)]
        public Object Leaderboard { get; set; }

        /// <summary>
        /// Gets or Sets PreviousPeriod
        /// </summary>
        [DataMember(Name = "previousPeriod", EmitDefaultValue = true)]
        public Object PreviousPeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LeaderboardPeriodDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LeaderboardId: ").Append(LeaderboardId).Append("\n");
            sb.Append("  ResetRule: ").Append(ResetRule).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  EndAt: ").Append(EndAt).Append("\n");
            sb.Append("  PreviousPeriodId: ").Append(PreviousPeriodId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Leaderboard: ").Append(Leaderboard).Append("\n");
            sb.Append("  PreviousPeriod: ").Append(PreviousPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
