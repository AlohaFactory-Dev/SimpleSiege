/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// I18nContent
    /// </summary>
    [DataContract(Name = "I18nContent")]
    public partial class I18nContent
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="I18nContent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected I18nContent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="I18nContent" /> class.
        /// </summary>
        /// <param name="languageCode">languageCode (required).</param>
        /// <param name="title">title.</param>
        /// <param name="content">content (required).</param>
        /// <param name="imageBytes">imageBytes.</param>
        public I18nContent(string languageCode = default(string), string title = default(string), string content = default(string), string imageBytes = default(string))
        {
            // to ensure "languageCode" is required (not null)
            if (languageCode == null)
            {
                throw new ArgumentNullException("languageCode is a required property for I18nContent and cannot be null");
            }
            this.LanguageCode = languageCode;
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new ArgumentNullException("content is a required property for I18nContent and cannot be null");
            }
            this.Content = content;
            this.Title = title;
            this.ImageBytes = imageBytes;
        }

        /// <summary>
        /// Gets or Sets LanguageCode
        /// </summary>
        [DataMember(Name = "languageCode", IsRequired = true, EmitDefaultValue = true)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = true)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets ImageBytes
        /// </summary>
        [DataMember(Name = "imageBytes", EmitDefaultValue = false)]
        public string ImageBytes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class I18nContent {\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ImageBytes: ").Append(ImageBytes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
