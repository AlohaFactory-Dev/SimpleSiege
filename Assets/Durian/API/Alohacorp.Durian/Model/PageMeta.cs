/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// PageMeta
    /// </summary>
    [DataContract(Name = "PageMeta")]
    public partial class PageMeta
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageMeta" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PageMeta() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PageMeta" /> class.
        /// </summary>
        /// <param name="size">size (required).</param>
        /// <param name="page">page (required).</param>
        /// <param name="first">first (required).</param>
        /// <param name="last">last (required).</param>
        /// <param name="numberOfElements">numberOfElements (required).</param>
        /// <param name="totalElements">totalElements (required).</param>
        /// <param name="totalPages">totalPages (required).</param>
        public PageMeta(int? size = default(int?), int? page = default(int?), bool first = default(bool), bool last = default(bool), int? numberOfElements = default(int?), long? totalElements = default(long?), int? totalPages = default(int?))
        {
            // to ensure "size" is required (not null)
            if (size == null)
            {
                throw new ArgumentNullException("size is a required property for PageMeta and cannot be null");
            }
            this.Size = size;
            // to ensure "page" is required (not null)
            if (page == null)
            {
                throw new ArgumentNullException("page is a required property for PageMeta and cannot be null");
            }
            this.Page = page;
            this.First = first;
            this.Last = last;
            // to ensure "numberOfElements" is required (not null)
            if (numberOfElements == null)
            {
                throw new ArgumentNullException("numberOfElements is a required property for PageMeta and cannot be null");
            }
            this.NumberOfElements = numberOfElements;
            // to ensure "totalElements" is required (not null)
            if (totalElements == null)
            {
                throw new ArgumentNullException("totalElements is a required property for PageMeta and cannot be null");
            }
            this.TotalElements = totalElements;
            // to ensure "totalPages" is required (not null)
            if (totalPages == null)
            {
                throw new ArgumentNullException("totalPages is a required property for PageMeta and cannot be null");
            }
            this.TotalPages = totalPages;
        }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = true)]
        public int? Size { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name = "page", IsRequired = true, EmitDefaultValue = true)]
        public int? Page { get; set; }

        /// <summary>
        /// Gets or Sets First
        /// </summary>
        [DataMember(Name = "first", IsRequired = true, EmitDefaultValue = true)]
        public bool First { get; set; }

        /// <summary>
        /// Gets or Sets Last
        /// </summary>
        [DataMember(Name = "last", IsRequired = true, EmitDefaultValue = true)]
        public bool Last { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfElements
        /// </summary>
        [DataMember(Name = "numberOfElements", IsRequired = true, EmitDefaultValue = true)]
        public int? NumberOfElements { get; set; }

        /// <summary>
        /// Gets or Sets TotalElements
        /// </summary>
        [DataMember(Name = "totalElements", IsRequired = true, EmitDefaultValue = true)]
        public long? TotalElements { get; set; }

        /// <summary>
        /// Gets or Sets TotalPages
        /// </summary>
        [DataMember(Name = "totalPages", IsRequired = true, EmitDefaultValue = true)]
        public int? TotalPages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PageMeta {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  First: ").Append(First).Append("\n");
            sb.Append("  Last: ").Append(Last).Append("\n");
            sb.Append("  NumberOfElements: ").Append(NumberOfElements).Append("\n");
            sb.Append("  TotalElements: ").Append(TotalElements).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
