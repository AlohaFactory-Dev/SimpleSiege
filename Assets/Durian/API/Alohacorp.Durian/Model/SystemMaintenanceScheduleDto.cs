/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// SystemMaintenanceScheduleDto
    /// </summary>
    [DataContract(Name = "SystemMaintenanceScheduleDto")]
    public partial class SystemMaintenanceScheduleDto
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemMaintenanceScheduleDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SystemMaintenanceScheduleDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemMaintenanceScheduleDto" /> class.
        /// </summary>
        /// <param name="startsAt">startsAt (required).</param>
        /// <param name="endsAt">endsAt (required).</param>
        /// <param name="announcementMessage">announcementMessage (required).</param>
        /// <param name="i18nContents">i18nContents.</param>
        public SystemMaintenanceScheduleDto(DateTime startsAt = default(DateTime), DateTime endsAt = default(DateTime), string announcementMessage = default(string), List<I18nContent> i18nContents = default(List<I18nContent>))
        {
            this.StartsAt = startsAt;
            this.EndsAt = endsAt;
            // to ensure "announcementMessage" is required (not null)
            if (announcementMessage == null)
            {
                throw new ArgumentNullException("announcementMessage is a required property for SystemMaintenanceScheduleDto and cannot be null");
            }
            this.AnnouncementMessage = announcementMessage;
            this.I18nContents = i18nContents;
        }

        /// <summary>
        /// Gets or Sets StartsAt
        /// </summary>
        [DataMember(Name = "startsAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartsAt { get; set; }

        /// <summary>
        /// Gets or Sets EndsAt
        /// </summary>
        [DataMember(Name = "endsAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime EndsAt { get; set; }

        /// <summary>
        /// Gets or Sets AnnouncementMessage
        /// </summary>
        [DataMember(Name = "announcementMessage", IsRequired = true, EmitDefaultValue = true)]
        public string AnnouncementMessage { get; set; }

        /// <summary>
        /// Gets or Sets I18nContents
        /// </summary>
        [DataMember(Name = "i18nContents", EmitDefaultValue = false)]
        public List<I18nContent> I18nContents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemMaintenanceScheduleDto {\n");
            sb.Append("  StartsAt: ").Append(StartsAt).Append("\n");
            sb.Append("  EndsAt: ").Append(EndsAt).Append("\n");
            sb.Append("  AnnouncementMessage: ").Append(AnnouncementMessage).Append("\n");
            sb.Append("  I18nContents: ").Append(I18nContents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
