/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// PrivatePlayerDto
    /// </summary>
    [DataContract(Name = "PrivatePlayerDto")]
    public partial class PrivatePlayerDto
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrivatePlayerDto" /> class.
        /// </summary>
        /// <param name="uid">uid.</param>
        /// <param name="name">name.</param>
        /// <param name="gameData">gameData.</param>
        /// <param name="gameScore">gameScore.</param>
        /// <param name="gameAsset">gameAsset.</param>
        /// <param name="profileData">profileData.</param>
        /// <param name="accessedAt">accessedAt.</param>
        /// <param name="email">email.</param>
        /// <param name="country">country.</param>
        /// <param name="device">device.</param>
        /// <param name="clientVersion">clientVersion.</param>
        /// <param name="settings">settings.</param>
        /// <param name="signInProviders">signInProviders.</param>
        /// <param name="inviterUid">inviterUid.</param>
        public PrivatePlayerDto(string uid = default(string), string name = default(string), Dictionary<string, Object> gameData = default(Dictionary<string, Object>), Dictionary<string, double?> gameScore = default(Dictionary<string, double?>), Dictionary<string, double?> gameAsset = default(Dictionary<string, double?>), Dictionary<string, string> profileData = default(Dictionary<string, string>), long? accessedAt = default(long?), string email = default(string), string country = default(string), string device = default(string), string clientVersion = default(string), Dictionary<string, Object> settings = default(Dictionary<string, Object>), List<Object> signInProviders = default(List<Object>), string inviterUid = default(string))
        {
            this.Uid = uid;
            this.Name = name;
            this.GameData = gameData;
            this.GameScore = gameScore;
            this.GameAsset = gameAsset;
            this.ProfileData = profileData;
            this.AccessedAt = accessedAt;
            this.Email = email;
            this.Country = country;
            this.Device = device;
            this.ClientVersion = clientVersion;
            this.Settings = settings;
            this.SignInProviders = signInProviders;
            this.InviterUid = inviterUid;
        }

        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name = "uid", EmitDefaultValue = false)]
        public string Uid { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets GameData
        /// </summary>
        [DataMember(Name = "gameData", EmitDefaultValue = false)]
        public Dictionary<string, Object> GameData { get; set; }

        /// <summary>
        /// Gets or Sets GameScore
        /// </summary>
        [DataMember(Name = "gameScore", EmitDefaultValue = false)]
        public Dictionary<string, double?> GameScore { get; set; }

        /// <summary>
        /// Gets or Sets GameAsset
        /// </summary>
        [DataMember(Name = "gameAsset", EmitDefaultValue = false)]
        public Dictionary<string, double?> GameAsset { get; set; }

        /// <summary>
        /// Gets or Sets ProfileData
        /// </summary>
        [DataMember(Name = "profileData", EmitDefaultValue = false)]
        public Dictionary<string, string> ProfileData { get; set; }

        /// <summary>
        /// Gets or Sets AccessedAt
        /// </summary>
        [DataMember(Name = "accessedAt", EmitDefaultValue = false)]
        public long? AccessedAt { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name = "device", EmitDefaultValue = false)]
        public string Device { get; set; }

        /// <summary>
        /// Gets or Sets ClientVersion
        /// </summary>
        [DataMember(Name = "clientVersion", EmitDefaultValue = false)]
        public string ClientVersion { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name = "settings", EmitDefaultValue = false)]
        public Dictionary<string, Object> Settings { get; set; }

        /// <summary>
        /// Gets or Sets SignInProviders
        /// </summary>
        [DataMember(Name = "signInProviders", EmitDefaultValue = false)]
        public List<Object> SignInProviders { get; set; }

        /// <summary>
        /// Gets or Sets InviterUid
        /// </summary>
        [DataMember(Name = "inviterUid", EmitDefaultValue = false)]
        public string InviterUid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrivatePlayerDto {\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  GameData: ").Append(GameData).Append("\n");
            sb.Append("  GameScore: ").Append(GameScore).Append("\n");
            sb.Append("  GameAsset: ").Append(GameAsset).Append("\n");
            sb.Append("  ProfileData: ").Append(ProfileData).Append("\n");
            sb.Append("  AccessedAt: ").Append(AccessedAt).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("  ClientVersion: ").Append(ClientVersion).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  SignInProviders: ").Append(SignInProviders).Append("\n");
            sb.Append("  InviterUid: ").Append(InviterUid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
