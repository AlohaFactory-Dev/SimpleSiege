/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// PlayerFilter
    /// </summary>
    [DataContract(Name = "PlayerFilter")]
    public partial class PlayerFilter
    {
        /// <summary>
        /// Defines Operator
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorEnum
        {
            /// <summary>
            /// Enum EQUAL for value: EQUAL
            /// </summary>
            [EnumMember(Value = "EQUAL")]
            EQUAL = 1,

            /// <summary>
            /// Enum NOTEQUAL for value: NOT_EQUAL
            /// </summary>
            [EnumMember(Value = "NOT_EQUAL")]
            NOTEQUAL = 2,

            /// <summary>
            /// Enum GREATERTHAN for value: GREATER_THAN
            /// </summary>
            [EnumMember(Value = "GREATER_THAN")]
            GREATERTHAN = 3,

            /// <summary>
            /// Enum GREATERTHANOREQUAL for value: GREATER_THAN_OR_EQUAL
            /// </summary>
            [EnumMember(Value = "GREATER_THAN_OR_EQUAL")]
            GREATERTHANOREQUAL = 4,

            /// <summary>
            /// Enum LESSTHAN for value: LESS_THAN
            /// </summary>
            [EnumMember(Value = "LESS_THAN")]
            LESSTHAN = 5,

            /// <summary>
            /// Enum LESSTHANOREQUAL for value: LESS_THAN_OR_EQUAL
            /// </summary>
            [EnumMember(Value = "LESS_THAN_OR_EQUAL")]
            LESSTHANOREQUAL = 6,

            /// <summary>
            /// Enum IN for value: IN
            /// </summary>
            [EnumMember(Value = "IN")]
            IN = 7,

            /// <summary>
            /// Enum NOTIN for value: NOT_IN
            /// </summary>
            [EnumMember(Value = "NOT_IN")]
            NOTIN = 8,

            /// <summary>
            /// Enum CONTAINS for value: CONTAINS
            /// </summary>
            [EnumMember(Value = "CONTAINS")]
            CONTAINS = 9,

            /// <summary>
            /// Enum NOTCONTAINS for value: NOT_CONTAINS
            /// </summary>
            [EnumMember(Value = "NOT_CONTAINS")]
            NOTCONTAINS = 10
        }


        /// <summary>
        /// Gets or Sets Operator
        /// </summary>
        [DataMember(Name = "operator", IsRequired = true, EmitDefaultValue = true)]
        public OperatorEnum Operator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerFilter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlayerFilter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerFilter" /> class.
        /// </summary>
        /// <param name="field">field (required).</param>
        /// <param name="varOperator">varOperator (required).</param>
        /// <param name="value">value (required).</param>
        public PlayerFilter(string field = default(string), OperatorEnum varOperator = default(OperatorEnum), Object value = default(Object))
        {
            // to ensure "field" is required (not null)
            if (field == null)
            {
                throw new ArgumentNullException("field is a required property for PlayerFilter and cannot be null");
            }
            this.Field = field;
            this.Operator = varOperator;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for PlayerFilter and cannot be null");
            }
            this.Value = value;
        }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name = "field", IsRequired = true, EmitDefaultValue = true)]
        public string Field { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public Object Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerFilter {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
