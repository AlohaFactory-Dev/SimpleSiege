/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// ClassInfo
    /// </summary>
    [DataContract(Name = "ClassInfo")]
    public partial class ClassInfo
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassInfo" /> class.
        /// </summary>
        /// <param name="ignoreCase">ignoreCase.</param>
        /// <param name="names">names.</param>
        /// <param name="varEnum">varEnum.</param>
        /// <param name="fieldInfos">fieldInfos.</param>
        public ClassInfo(bool ignoreCase = default(bool), List<string> names = default(List<string>), bool varEnum = default(bool), List<FieldInfo> fieldInfos = default(List<FieldInfo>))
        {
            this.IgnoreCase = ignoreCase;
            this.Names = names;
            this.Enum = varEnum;
            this.FieldInfos = fieldInfos;
        }

        /// <summary>
        /// Gets or Sets IgnoreCase
        /// </summary>
        [DataMember(Name = "ignoreCase", EmitDefaultValue = true)]
        public bool IgnoreCase { get; set; }

        /// <summary>
        /// Gets or Sets Names
        /// </summary>
        [DataMember(Name = "names", EmitDefaultValue = false)]
        public List<string> Names { get; set; }

        /// <summary>
        /// Gets or Sets Enum
        /// </summary>
        [DataMember(Name = "enum", EmitDefaultValue = true)]
        public bool Enum { get; set; }

        /// <summary>
        /// Gets or Sets FieldInfos
        /// </summary>
        [DataMember(Name = "fieldInfos", EmitDefaultValue = false)]
        public List<FieldInfo> FieldInfos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClassInfo {\n");
            sb.Append("  IgnoreCase: ").Append(IgnoreCase).Append("\n");
            sb.Append("  Names: ").Append(Names).Append("\n");
            sb.Append("  Enum: ").Append(Enum).Append("\n");
            sb.Append("  FieldInfos: ").Append(FieldInfos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
