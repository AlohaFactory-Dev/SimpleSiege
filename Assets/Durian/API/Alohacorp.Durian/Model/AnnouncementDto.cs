/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// AnnouncementDto
    /// </summary>
    [DataContract(Name = "AnnouncementDto")]
    public partial class AnnouncementDto
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnnouncementDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="content">content.</param>
        /// <param name="title">title.</param>
        /// <param name="showImage">showImage.</param>
        /// <param name="imageBytes">Base64 encoded image bytes.</param>
        /// <param name="i18nContents">i18nContents.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="startsAt">startsAt.</param>
        /// <param name="endsAt">endsAt.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public AnnouncementDto(Guid id = default(Guid), string content = default(string), string title = default(string), bool showImage = default(bool), string imageBytes = default(string), List<I18nContentDto> i18nContents = default(List<I18nContentDto>), bool isActive = default(bool), long? startsAt = default(long?), long? endsAt = default(long?), long? createdAt = default(long?), long? updatedAt = default(long?))
        {
            this.Id = id;
            this.Content = content;
            this.Title = title;
            this.ShowImage = showImage;
            this.ImageBytes = imageBytes;
            this.I18nContents = i18nContents;
            this.IsActive = isActive;
            this.StartsAt = startsAt;
            this.EndsAt = endsAt;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets ShowImage
        /// </summary>
        [DataMember(Name = "showImage", EmitDefaultValue = true)]
        public bool ShowImage { get; set; }

        /// <summary>
        /// Base64 encoded image bytes
        /// </summary>
        /// <value>Base64 encoded image bytes</value>
        [DataMember(Name = "imageBytes", EmitDefaultValue = false)]
        public string ImageBytes { get; set; }

        /// <summary>
        /// Gets or Sets I18nContents
        /// </summary>
        [DataMember(Name = "i18nContents", EmitDefaultValue = false)]
        public List<I18nContentDto> I18nContents { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets StartsAt
        /// </summary>
        [DataMember(Name = "startsAt", EmitDefaultValue = false)]
        public long? StartsAt { get; set; }

        /// <summary>
        /// Gets or Sets EndsAt
        /// </summary>
        [DataMember(Name = "endsAt", EmitDefaultValue = false)]
        public long? EndsAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public long? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public long? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AnnouncementDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ShowImage: ").Append(ShowImage).Append("\n");
            sb.Append("  ImageBytes: ").Append(ImageBytes).Append("\n");
            sb.Append("  I18nContents: ").Append(I18nContents).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  StartsAt: ").Append(StartsAt).Append("\n");
            sb.Append("  EndsAt: ").Append(EndsAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
