/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// LeaderboardCondition
    /// </summary>
    [DataContract(Name = "LeaderboardCondition")]
    public partial class LeaderboardCondition
    {
        /// <summary>
        /// Defines ConditionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConditionTypeEnum
        {
            /// <summary>
            /// Enum RANKRANGE for value: RANK_RANGE
            /// </summary>
            [EnumMember(Value = "RANK_RANGE")]
            RANKRANGE = 1,

            /// <summary>
            /// Enum PERCENTILERANGE for value: PERCENTILE_RANGE
            /// </summary>
            [EnumMember(Value = "PERCENTILE_RANGE")]
            PERCENTILERANGE = 2,

            /// <summary>
            /// Enum SCORERANGE for value: SCORE_RANGE
            /// </summary>
            [EnumMember(Value = "SCORE_RANGE")]
            SCORERANGE = 3
        }


        /// <summary>
        /// Gets or Sets ConditionType
        /// </summary>
        [DataMember(Name = "conditionType", IsRequired = true, EmitDefaultValue = true)]
        public ConditionTypeEnum ConditionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardCondition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LeaderboardCondition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardCondition" /> class.
        /// </summary>
        /// <param name="conditionType">conditionType (required).</param>
        /// <param name="minValue">minValue.</param>
        /// <param name="maxValue">maxValue.</param>
        public LeaderboardCondition(ConditionTypeEnum conditionType = default(ConditionTypeEnum), double? minValue = default(double?), double? maxValue = default(double?))
        {
            this.ConditionType = conditionType;
            this.MinValue = minValue;
            this.MaxValue = maxValue;
        }

        /// <summary>
        /// Gets or Sets MinValue
        /// </summary>
        [DataMember(Name = "minValue", EmitDefaultValue = false)]
        public double? MinValue { get; set; }

        /// <summary>
        /// Gets or Sets MaxValue
        /// </summary>
        [DataMember(Name = "maxValue", EmitDefaultValue = false)]
        public double? MaxValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LeaderboardCondition {\n");
            sb.Append("  ConditionType: ").Append(ConditionType).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
