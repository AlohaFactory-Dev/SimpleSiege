/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// LeagueDto
    /// </summary>
    [DataContract(Name = "LeagueDto")]
    public partial class LeagueDto
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LeagueDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LeagueDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeagueDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="leagueSeasonId">leagueSeasonId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="tier">tier (required).</param>
        /// <param name="hasSingleDivision">hasSingleDivision (required).</param>
        /// <param name="divisionCapacity">divisionCapacity.</param>
        /// <param name="divisionBotCount">divisionBotCount (required).</param>
        /// <param name="initialScore">initialScore (required).</param>
        /// <param name="defaultRewardMail">defaultRewardMail.</param>
        /// <param name="defaultDailyRewardMail">defaultDailyRewardMail.</param>
        /// <param name="rewardConditions">rewardConditions.</param>
        /// <param name="dailyRewardConditions">dailyRewardConditions.</param>
        /// <param name="promoteConditions">promoteConditions.</param>
        public LeagueDto(string id = default(string), string leagueSeasonId = default(string), string name = default(string), int? tier = default(int?), bool hasSingleDivision = default(bool), int? divisionCapacity = default(int?), int? divisionBotCount = default(int?), decimal? initialScore = default(decimal?), MailDto defaultRewardMail = default(MailDto), MailDto defaultDailyRewardMail = default(MailDto), List<LeaderboardRewardConditionDto> rewardConditions = default(List<LeaderboardRewardConditionDto>), List<LeaderboardRewardConditionDto> dailyRewardConditions = default(List<LeaderboardRewardConditionDto>), List<LeaguePromoteConditionDto> promoteConditions = default(List<LeaguePromoteConditionDto>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for LeagueDto and cannot be null");
            }
            this.Id = id;
            // to ensure "leagueSeasonId" is required (not null)
            if (leagueSeasonId == null)
            {
                throw new ArgumentNullException("leagueSeasonId is a required property for LeagueDto and cannot be null");
            }
            this.LeagueSeasonId = leagueSeasonId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for LeagueDto and cannot be null");
            }
            this.Name = name;
            // to ensure "tier" is required (not null)
            if (tier == null)
            {
                throw new ArgumentNullException("tier is a required property for LeagueDto and cannot be null");
            }
            this.Tier = tier;
            this.HasSingleDivision = hasSingleDivision;
            // to ensure "divisionBotCount" is required (not null)
            if (divisionBotCount == null)
            {
                throw new ArgumentNullException("divisionBotCount is a required property for LeagueDto and cannot be null");
            }
            this.DivisionBotCount = divisionBotCount;
            // to ensure "initialScore" is required (not null)
            if (initialScore == null)
            {
                throw new ArgumentNullException("initialScore is a required property for LeagueDto and cannot be null");
            }
            this.InitialScore = initialScore;
            this.DivisionCapacity = divisionCapacity;
            this.DefaultRewardMail = defaultRewardMail;
            this.DefaultDailyRewardMail = defaultDailyRewardMail;
            this.RewardConditions = rewardConditions;
            this.DailyRewardConditions = dailyRewardConditions;
            this.PromoteConditions = promoteConditions;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LeagueSeasonId
        /// </summary>
        [DataMember(Name = "leagueSeasonId", IsRequired = true, EmitDefaultValue = true)]
        public string LeagueSeasonId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Tier
        /// </summary>
        [DataMember(Name = "tier", IsRequired = true, EmitDefaultValue = true)]
        public int? Tier { get; set; }

        /// <summary>
        /// Gets or Sets HasSingleDivision
        /// </summary>
        [DataMember(Name = "hasSingleDivision", IsRequired = true, EmitDefaultValue = true)]
        public bool HasSingleDivision { get; set; }

        /// <summary>
        /// Gets or Sets DivisionCapacity
        /// </summary>
        [DataMember(Name = "divisionCapacity", EmitDefaultValue = false)]
        public int? DivisionCapacity { get; set; }

        /// <summary>
        /// Gets or Sets DivisionBotCount
        /// </summary>
        [DataMember(Name = "divisionBotCount", IsRequired = true, EmitDefaultValue = true)]
        public int? DivisionBotCount { get; set; }

        /// <summary>
        /// Gets or Sets InitialScore
        /// </summary>
        [DataMember(Name = "initialScore", IsRequired = true, EmitDefaultValue = true)]
        public decimal? InitialScore { get; set; }

        /// <summary>
        /// Gets or Sets DefaultRewardMail
        /// </summary>
        [DataMember(Name = "defaultRewardMail", EmitDefaultValue = false)]
        public MailDto DefaultRewardMail { get; set; }

        /// <summary>
        /// Gets or Sets DefaultDailyRewardMail
        /// </summary>
        [DataMember(Name = "defaultDailyRewardMail", EmitDefaultValue = false)]
        public MailDto DefaultDailyRewardMail { get; set; }

        /// <summary>
        /// Gets or Sets RewardConditions
        /// </summary>
        [DataMember(Name = "rewardConditions", EmitDefaultValue = false)]
        public List<LeaderboardRewardConditionDto> RewardConditions { get; set; }

        /// <summary>
        /// Gets or Sets DailyRewardConditions
        /// </summary>
        [DataMember(Name = "dailyRewardConditions", EmitDefaultValue = false)]
        public List<LeaderboardRewardConditionDto> DailyRewardConditions { get; set; }

        /// <summary>
        /// Gets or Sets PromoteConditions
        /// </summary>
        [DataMember(Name = "promoteConditions", EmitDefaultValue = false)]
        public List<LeaguePromoteConditionDto> PromoteConditions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LeagueDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LeagueSeasonId: ").Append(LeagueSeasonId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  HasSingleDivision: ").Append(HasSingleDivision).Append("\n");
            sb.Append("  DivisionCapacity: ").Append(DivisionCapacity).Append("\n");
            sb.Append("  DivisionBotCount: ").Append(DivisionBotCount).Append("\n");
            sb.Append("  InitialScore: ").Append(InitialScore).Append("\n");
            sb.Append("  DefaultRewardMail: ").Append(DefaultRewardMail).Append("\n");
            sb.Append("  DefaultDailyRewardMail: ").Append(DefaultDailyRewardMail).Append("\n");
            sb.Append("  RewardConditions: ").Append(RewardConditions).Append("\n");
            sb.Append("  DailyRewardConditions: ").Append(DailyRewardConditions).Append("\n");
            sb.Append("  PromoteConditions: ").Append(PromoteConditions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
