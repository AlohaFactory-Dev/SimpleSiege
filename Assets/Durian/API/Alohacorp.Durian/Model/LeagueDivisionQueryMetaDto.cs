/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// LeagueDivisionQueryMetaDto
    /// </summary>
    [DataContract(Name = "LeagueDivisionQueryMetaDto")]
    public partial class LeagueDivisionQueryMetaDto
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LeagueDivisionQueryMetaDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LeagueDivisionQueryMetaDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeagueDivisionQueryMetaDto" /> class.
        /// </summary>
        /// <param name="leagueGroupId">leagueGroupId (required).</param>
        /// <param name="leagueSeasonId">leagueSeasonId (required).</param>
        /// <param name="leagueId">leagueId (required).</param>
        /// <param name="leagueDivisionId">leagueDivisionId (required).</param>
        /// <param name="offset">offset (required).</param>
        /// <param name="limit">limit (required).</param>
        public LeagueDivisionQueryMetaDto(string leagueGroupId = default(string), string leagueSeasonId = default(string), string leagueId = default(string), string leagueDivisionId = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            // to ensure "leagueGroupId" is required (not null)
            if (leagueGroupId == null)
            {
                throw new ArgumentNullException("leagueGroupId is a required property for LeagueDivisionQueryMetaDto and cannot be null");
            }
            this.LeagueGroupId = leagueGroupId;
            // to ensure "leagueSeasonId" is required (not null)
            if (leagueSeasonId == null)
            {
                throw new ArgumentNullException("leagueSeasonId is a required property for LeagueDivisionQueryMetaDto and cannot be null");
            }
            this.LeagueSeasonId = leagueSeasonId;
            // to ensure "leagueId" is required (not null)
            if (leagueId == null)
            {
                throw new ArgumentNullException("leagueId is a required property for LeagueDivisionQueryMetaDto and cannot be null");
            }
            this.LeagueId = leagueId;
            // to ensure "leagueDivisionId" is required (not null)
            if (leagueDivisionId == null)
            {
                throw new ArgumentNullException("leagueDivisionId is a required property for LeagueDivisionQueryMetaDto and cannot be null");
            }
            this.LeagueDivisionId = leagueDivisionId;
            // to ensure "offset" is required (not null)
            if (offset == null)
            {
                throw new ArgumentNullException("offset is a required property for LeagueDivisionQueryMetaDto and cannot be null");
            }
            this.Offset = offset;
            // to ensure "limit" is required (not null)
            if (limit == null)
            {
                throw new ArgumentNullException("limit is a required property for LeagueDivisionQueryMetaDto and cannot be null");
            }
            this.Limit = limit;
        }

        /// <summary>
        /// Gets or Sets LeagueGroupId
        /// </summary>
        [DataMember(Name = "leagueGroupId", IsRequired = true, EmitDefaultValue = true)]
        public string LeagueGroupId { get; set; }

        /// <summary>
        /// Gets or Sets LeagueSeasonId
        /// </summary>
        [DataMember(Name = "leagueSeasonId", IsRequired = true, EmitDefaultValue = true)]
        public string LeagueSeasonId { get; set; }

        /// <summary>
        /// Gets or Sets LeagueId
        /// </summary>
        [DataMember(Name = "leagueId", IsRequired = true, EmitDefaultValue = true)]
        public string LeagueId { get; set; }

        /// <summary>
        /// Gets or Sets LeagueDivisionId
        /// </summary>
        [DataMember(Name = "leagueDivisionId", IsRequired = true, EmitDefaultValue = true)]
        public string LeagueDivisionId { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name = "offset", IsRequired = true, EmitDefaultValue = true)]
        public int? Offset { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", IsRequired = true, EmitDefaultValue = true)]
        public int? Limit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LeagueDivisionQueryMetaDto {\n");
            sb.Append("  LeagueGroupId: ").Append(LeagueGroupId).Append("\n");
            sb.Append("  LeagueSeasonId: ").Append(LeagueSeasonId).Append("\n");
            sb.Append("  LeagueId: ").Append(LeagueId).Append("\n");
            sb.Append("  LeagueDivisionId: ").Append(LeagueDivisionId).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
