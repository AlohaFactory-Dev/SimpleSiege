/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// PlayStoreReceiptDto
    /// </summary>
    [DataContract(Name = "PlayStoreReceiptDto")]
    public partial class PlayStoreReceiptDto
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayStoreReceiptDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlayStoreReceiptDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayStoreReceiptDto" /> class.
        /// </summary>
        /// <param name="orderId">orderId (required).</param>
        /// <param name="productId">productId (required).</param>
        /// <param name="purchaseToken">purchaseToken (required).</param>
        /// <param name="productPurchase">productPurchase (required).</param>
        public PlayStoreReceiptDto(string orderId = default(string), string productId = default(string), string purchaseToken = default(string), ProductPurchase productPurchase = default(ProductPurchase))
        {
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new ArgumentNullException("orderId is a required property for PlayStoreReceiptDto and cannot be null");
            }
            this.OrderId = orderId;
            // to ensure "productId" is required (not null)
            if (productId == null)
            {
                throw new ArgumentNullException("productId is a required property for PlayStoreReceiptDto and cannot be null");
            }
            this.ProductId = productId;
            // to ensure "purchaseToken" is required (not null)
            if (purchaseToken == null)
            {
                throw new ArgumentNullException("purchaseToken is a required property for PlayStoreReceiptDto and cannot be null");
            }
            this.PurchaseToken = purchaseToken;
            // to ensure "productPurchase" is required (not null)
            if (productPurchase == null)
            {
                throw new ArgumentNullException("productPurchase is a required property for PlayStoreReceiptDto and cannot be null");
            }
            this.ProductPurchase = productPurchase;
        }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "orderId", IsRequired = true, EmitDefaultValue = true)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name = "productId", IsRequired = true, EmitDefaultValue = true)]
        public string ProductId { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseToken
        /// </summary>
        [DataMember(Name = "purchaseToken", IsRequired = true, EmitDefaultValue = true)]
        public string PurchaseToken { get; set; }

        /// <summary>
        /// Gets or Sets ProductPurchase
        /// </summary>
        [DataMember(Name = "productPurchase", IsRequired = true, EmitDefaultValue = true)]
        public ProductPurchase ProductPurchase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayStoreReceiptDto {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  PurchaseToken: ").Append(PurchaseToken).Append("\n");
            sb.Append("  ProductPurchase: ").Append(ProductPurchase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
