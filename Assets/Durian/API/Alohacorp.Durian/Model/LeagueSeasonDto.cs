/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// LeagueSeasonDto
    /// </summary>
    [DataContract(Name = "LeagueSeasonDto")]
    public partial class LeagueSeasonDto
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 1,

            /// <summary>
            /// Enum PREPARING for value: PREPARING
            /// </summary>
            [EnumMember(Value = "PREPARING")]
            PREPARING = 2,

            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 3,

            /// <summary>
            /// Enum CALCULATING for value: CALCULATING
            /// </summary>
            [EnumMember(Value = "CALCULATING")]
            CALCULATING = 4,

            /// <summary>
            /// Enum FINISHED for value: FINISHED
            /// </summary>
            [EnumMember(Value = "FINISHED")]
            FINISHED = 5
        }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeagueSeasonDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LeagueSeasonDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeagueSeasonDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="leagueGroupId">leagueGroupId (required).</param>
        /// <param name="state">state (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="previousLeagueSeasonId">previousLeagueSeasonId.</param>
        /// <param name="startAt">startAt (required).</param>
        /// <param name="endAt">endAt (required).</param>
        /// <param name="leagueGroup">leagueGroup.</param>
        /// <param name="previousLeagueSeason">previousLeagueSeason.</param>
        /// <param name="leagues">leagues.</param>
        public LeagueSeasonDto(string id = default(string), string leagueGroupId = default(string), StateEnum state = default(StateEnum), string name = default(string), string description = default(string), string previousLeagueSeasonId = default(string), long? startAt = default(long?), long? endAt = default(long?), LeagueGroupDto leagueGroup = default(LeagueGroupDto), LeagueSeasonDto previousLeagueSeason = default(LeagueSeasonDto), List<LeagueDto> leagues = default(List<LeagueDto>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for LeagueSeasonDto and cannot be null");
            }
            this.Id = id;
            // to ensure "leagueGroupId" is required (not null)
            if (leagueGroupId == null)
            {
                throw new ArgumentNullException("leagueGroupId is a required property for LeagueSeasonDto and cannot be null");
            }
            this.LeagueGroupId = leagueGroupId;
            this.State = state;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for LeagueSeasonDto and cannot be null");
            }
            this.Name = name;
            // to ensure "startAt" is required (not null)
            if (startAt == null)
            {
                throw new ArgumentNullException("startAt is a required property for LeagueSeasonDto and cannot be null");
            }
            this.StartAt = startAt;
            // to ensure "endAt" is required (not null)
            if (endAt == null)
            {
                throw new ArgumentNullException("endAt is a required property for LeagueSeasonDto and cannot be null");
            }
            this.EndAt = endAt;
            this.Description = description;
            this.PreviousLeagueSeasonId = previousLeagueSeasonId;
            this.LeagueGroup = leagueGroup;
            this.PreviousLeagueSeason = previousLeagueSeason;
            this.Leagues = leagues;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LeagueGroupId
        /// </summary>
        [DataMember(Name = "leagueGroupId", IsRequired = true, EmitDefaultValue = true)]
        public string LeagueGroupId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets PreviousLeagueSeasonId
        /// </summary>
        [DataMember(Name = "previousLeagueSeasonId", EmitDefaultValue = false)]
        public string PreviousLeagueSeasonId { get; set; }

        /// <summary>
        /// Gets or Sets StartAt
        /// </summary>
        [DataMember(Name = "startAt", IsRequired = true, EmitDefaultValue = true)]
        public long? StartAt { get; set; }

        /// <summary>
        /// Gets or Sets EndAt
        /// </summary>
        [DataMember(Name = "endAt", IsRequired = true, EmitDefaultValue = true)]
        public long? EndAt { get; set; }

        /// <summary>
        /// Gets or Sets LeagueGroup
        /// </summary>
        [DataMember(Name = "leagueGroup", EmitDefaultValue = false)]
        public LeagueGroupDto LeagueGroup { get; set; }

        /// <summary>
        /// Gets or Sets PreviousLeagueSeason
        /// </summary>
        [DataMember(Name = "previousLeagueSeason", EmitDefaultValue = false)]
        public LeagueSeasonDto PreviousLeagueSeason { get; set; }

        /// <summary>
        /// Gets or Sets Leagues
        /// </summary>
        [DataMember(Name = "leagues", EmitDefaultValue = false)]
        public List<LeagueDto> Leagues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LeagueSeasonDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LeagueGroupId: ").Append(LeagueGroupId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PreviousLeagueSeasonId: ").Append(PreviousLeagueSeasonId).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  EndAt: ").Append(EndAt).Append("\n");
            sb.Append("  LeagueGroup: ").Append(LeagueGroup).Append("\n");
            sb.Append("  PreviousLeagueSeason: ").Append(PreviousLeagueSeason).Append("\n");
            sb.Append("  Leagues: ").Append(Leagues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
