/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// Error
    /// </summary>
    [DataContract(Name = "Error")]
    public partial class Error
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Error" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Error() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Error" /> class.
        /// </summary>
        /// <param name="path">path (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="exceptionName">exceptionName.</param>
        /// <param name="bindingErrors">bindingErrors.</param>
        /// <param name="message">message (required).</param>
        /// <param name="errorDetail">errorDetail.</param>
        /// <param name="status">status (required).</param>
        /// <param name="reason">reason (required).</param>
        public Error(string path = default(string), DateTime timestamp = default(DateTime), string exceptionName = default(string), List<ObjectError> bindingErrors = default(List<ObjectError>), string message = default(string), ErrorErrorDetail errorDetail = default(ErrorErrorDetail), int? status = default(int?), string reason = default(string))
        {
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new ArgumentNullException("path is a required property for Error and cannot be null");
            }
            this.Path = path;
            this.Timestamp = timestamp;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for Error and cannot be null");
            }
            this.Message = message;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for Error and cannot be null");
            }
            this.Status = status;
            // to ensure "reason" is required (not null)
            if (reason == null)
            {
                throw new ArgumentNullException("reason is a required property for Error and cannot be null");
            }
            this.Reason = reason;
            this.ExceptionName = exceptionName;
            this.BindingErrors = bindingErrors;
            this.ErrorDetail = errorDetail;
        }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets ExceptionName
        /// </summary>
        [DataMember(Name = "exceptionName", EmitDefaultValue = false)]
        public string ExceptionName { get; set; }

        /// <summary>
        /// Gets or Sets BindingErrors
        /// </summary>
        [DataMember(Name = "bindingErrors", EmitDefaultValue = false)]
        public List<ObjectError> BindingErrors { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets ErrorDetail
        /// </summary>
        [DataMember(Name = "errorDetail", EmitDefaultValue = false)]
        public ErrorErrorDetail ErrorDetail { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Error {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  ExceptionName: ").Append(ExceptionName).Append("\n");
            sb.Append("  BindingErrors: ").Append(BindingErrors).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ErrorDetail: ").Append(ErrorDetail).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
