/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// ChatChannelDto
    /// </summary>
    [DataContract(Name = "ChatChannelDto")]
    public partial class ChatChannelDto
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum PUBLIC for value: PUBLIC
            /// </summary>
            [EnumMember(Value = "PUBLIC")]
            PUBLIC = 1,

            /// <summary>
            /// Enum PRIVATE for value: PRIVATE
            /// </summary>
            [EnumMember(Value = "PRIVATE")]
            PRIVATE = 2,

            /// <summary>
            /// Enum GROUP for value: GROUP
            /// </summary>
            [EnumMember(Value = "GROUP")]
            GROUP = 3
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatChannelDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChatChannelDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatChannelDto" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="isDefault">isDefault (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="roomCapacity">roomCapacity (required).</param>
        /// <param name="maxRoomCount">maxRoomCount.</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        /// <param name="chatRooms">chatRooms.</param>
        public ChatChannelDto(string id = default(string), bool isDefault = default(bool), TypeEnum type = default(TypeEnum), string name = default(string), string description = default(string), int? roomCapacity = default(int?), int? maxRoomCount = default(int?), long? createdAt = default(long?), long? updatedAt = default(long?), List<ChatRoomDto> chatRooms = default(List<ChatRoomDto>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ChatChannelDto and cannot be null");
            }
            this.Id = id;
            this.IsDefault = isDefault;
            this.Type = type;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ChatChannelDto and cannot be null");
            }
            this.Name = name;
            // to ensure "roomCapacity" is required (not null)
            if (roomCapacity == null)
            {
                throw new ArgumentNullException("roomCapacity is a required property for ChatChannelDto and cannot be null");
            }
            this.RoomCapacity = roomCapacity;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for ChatChannelDto and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new ArgumentNullException("updatedAt is a required property for ChatChannelDto and cannot be null");
            }
            this.UpdatedAt = updatedAt;
            this.Description = description;
            this.MaxRoomCount = maxRoomCount;
            this.ChatRooms = chatRooms;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [DataMember(Name = "isDefault", IsRequired = true, EmitDefaultValue = true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets RoomCapacity
        /// </summary>
        [DataMember(Name = "roomCapacity", IsRequired = true, EmitDefaultValue = true)]
        public int? RoomCapacity { get; set; }

        /// <summary>
        /// Gets or Sets MaxRoomCount
        /// </summary>
        [DataMember(Name = "maxRoomCount", EmitDefaultValue = false)]
        public int? MaxRoomCount { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public long? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public long? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ChatRooms
        /// </summary>
        [DataMember(Name = "chatRooms", EmitDefaultValue = false)]
        public List<ChatRoomDto> ChatRooms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChatChannelDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RoomCapacity: ").Append(RoomCapacity).Append("\n");
            sb.Append("  MaxRoomCount: ").Append(MaxRoomCount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ChatRooms: ").Append(ChatRooms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
