/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Alohacorp.Durian.Client.OpenAPIDateConverter;

namespace Alohacorp.Durian.Model
{
    /// <summary>
    /// FieldInfoField
    /// </summary>
    [DataContract(Name = "FieldInfo_field")]
    public partial class FieldInfoField
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldInfoField" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="modifiers">modifiers.</param>
        /// <param name="synthetic">synthetic.</param>
        /// <param name="declaredAnnotations">declaredAnnotations.</param>
        /// <param name="accessible">accessible.</param>
        /// <param name="enumConstant">enumConstant.</param>
        /// <param name="genericType">genericType.</param>
        /// <param name="annotatedType">annotatedType.</param>
        /// <param name="annotations">annotations.</param>
        public FieldInfoField(string name = default(string), int? modifiers = default(int?), bool synthetic = default(bool), List<Object> declaredAnnotations = default(List<Object>), bool accessible = default(bool), bool enumConstant = default(bool), FieldInfoFieldGenericType genericType = default(FieldInfoFieldGenericType), FieldInfoFieldAnnotatedType annotatedType = default(FieldInfoFieldAnnotatedType), List<Object> annotations = default(List<Object>))
        {
            this.Name = name;
            this.Modifiers = modifiers;
            this.Synthetic = synthetic;
            this.DeclaredAnnotations = declaredAnnotations;
            this.Accessible = accessible;
            this.EnumConstant = enumConstant;
            this.GenericType = genericType;
            this.AnnotatedType = annotatedType;
            this.Annotations = annotations;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Modifiers
        /// </summary>
        [DataMember(Name = "modifiers", EmitDefaultValue = false)]
        public int? Modifiers { get; set; }

        /// <summary>
        /// Gets or Sets Synthetic
        /// </summary>
        [DataMember(Name = "synthetic", EmitDefaultValue = true)]
        public bool Synthetic { get; set; }

        /// <summary>
        /// Gets or Sets DeclaredAnnotations
        /// </summary>
        [DataMember(Name = "declaredAnnotations", EmitDefaultValue = false)]
        public List<Object> DeclaredAnnotations { get; set; }

        /// <summary>
        /// Gets or Sets Accessible
        /// </summary>
        [DataMember(Name = "accessible", EmitDefaultValue = true)]
        [Obsolete]
        public bool Accessible { get; set; }

        /// <summary>
        /// Gets or Sets EnumConstant
        /// </summary>
        [DataMember(Name = "enumConstant", EmitDefaultValue = true)]
        public bool EnumConstant { get; set; }

        /// <summary>
        /// Gets or Sets GenericType
        /// </summary>
        [DataMember(Name = "genericType", EmitDefaultValue = false)]
        public FieldInfoFieldGenericType GenericType { get; set; }

        /// <summary>
        /// Gets or Sets AnnotatedType
        /// </summary>
        [DataMember(Name = "annotatedType", EmitDefaultValue = false)]
        public FieldInfoFieldAnnotatedType AnnotatedType { get; set; }

        /// <summary>
        /// Gets or Sets Annotations
        /// </summary>
        [DataMember(Name = "annotations", EmitDefaultValue = false)]
        public List<Object> Annotations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FieldInfoField {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Modifiers: ").Append(Modifiers).Append("\n");
            sb.Append("  Synthetic: ").Append(Synthetic).Append("\n");
            sb.Append("  DeclaredAnnotations: ").Append(DeclaredAnnotations).Append("\n");
            sb.Append("  Accessible: ").Append(Accessible).Append("\n");
            sb.Append("  EnumConstant: ").Append(EnumConstant).Append("\n");
            sb.Append("  GenericType: ").Append(GenericType).Append("\n");
            sb.Append("  AnnotatedType: ").Append(AnnotatedType).Append("\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
