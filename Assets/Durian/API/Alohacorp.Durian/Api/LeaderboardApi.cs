/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alohacorp.Durian.Client;
using Alohacorp.Durian.Model;

namespace Alohacorp.Durian.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeaderboardApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get leaderboard
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RootLeaderboardDto</returns>
        RootLeaderboardDto GetLeaderboard(string id);

        /// <summary>
        /// Get leaderboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RootLeaderboardDto</returns>
        ApiResponse<RootLeaderboardDto> GetLeaderboardWithHttpInfo(string id);
        /// <summary>
        /// Get leaderboard periods by date range
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from">From date in milliseconds (optional)</param>
        /// <param name="to">To date in milliseconds (optional)</param>
        /// <returns>RootListResponseLeaderboardPeriodDtoVoid</returns>
        RootListResponseLeaderboardPeriodDtoVoid GetLeaderboardPeriods(string id, decimal? from = default(decimal?), decimal? to = default(decimal?));

        /// <summary>
        /// Get leaderboard periods by date range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from">From date in milliseconds (optional)</param>
        /// <param name="to">To date in milliseconds (optional)</param>
        /// <returns>ApiResponse of RootListResponseLeaderboardPeriodDtoVoid</returns>
        ApiResponse<RootListResponseLeaderboardPeriodDtoVoid> GetLeaderboardPeriodsWithHttpInfo(string id, decimal? from = default(decimal?), decimal? to = default(decimal?));
        /// <summary>
        /// Get list of leaderboards
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>RootPageResponseLeaderboardDtoVoid</returns>
        RootPageResponseLeaderboardDtoVoid GetLeaderboards(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>));

        /// <summary>
        /// Get list of leaderboards
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of RootPageResponseLeaderboardDtoVoid</returns>
        ApiResponse<RootPageResponseLeaderboardDtoVoid> GetLeaderboardsWithHttpInfo(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>));
        /// <summary>
        /// Get random adjacent participants from the leaderboard period
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="participantId">The participant ID</param>
        /// <param name="limit"></param>
        /// <returns>RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto GetRandomAdjacentParticipants(string leaderboardId, string periodId, string participantId, decimal? limit);

        /// <summary>
        /// Get random adjacent participants from the leaderboard period
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="participantId">The participant ID</param>
        /// <param name="limit"></param>
        /// <returns>ApiResponse of RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> GetRandomAdjacentParticipantsWithHttpInfo(string leaderboardId, string periodId, string participantId, decimal? limit);
        /// <summary>
        /// Query leaderboard period
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard id</param>
        /// <param name="periodId">The period id</param>
        /// <param name="offset">The offset to query. default&#x3D;0 (optional, default to 0M)</param>
        /// <param name="limit">The limit to query. default&#x3D;100 (optional, default to 100M)</param>
        /// <returns>RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto QueryLeaderboardPeriod(string leaderboardId, string periodId, decimal? offset = default(decimal?), decimal? limit = default(decimal?));

        /// <summary>
        /// Query leaderboard period
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard id</param>
        /// <param name="periodId">The period id</param>
        /// <param name="offset">The offset to query. default&#x3D;0 (optional, default to 0M)</param>
        /// <param name="limit">The limit to query. default&#x3D;100 (optional, default to 100M)</param>
        /// <returns>ApiResponse of RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> QueryLeaderboardPeriodWithHttpInfo(string leaderboardId, string periodId, decimal? offset = default(decimal?), decimal? limit = default(decimal?));
        /// <summary>
        /// Get rank of the participant and their neighbors
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="participantId">The participant ID</param>
        /// <param name="gap"></param>
        /// <returns>RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto QueryParticipantLeaderboard(string leaderboardId, string periodId, string participantId, decimal? gap);

        /// <summary>
        /// Get rank of the participant and their neighbors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="participantId">The participant ID</param>
        /// <param name="gap"></param>
        /// <returns>ApiResponse of RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> QueryParticipantLeaderboardWithHttpInfo(string leaderboardId, string periodId, string participantId, decimal? gap);
        /// <summary>
        /// Update leaderboard period record
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="leaderboardPeriodRecordUpdateReqDto"></param>
        /// <returns>RootLeaderboardPeriodRecordDto</returns>
        RootLeaderboardPeriodRecordDto UpdateLeaderboardPeriodRecord(string leaderboardId, string periodId, LeaderboardPeriodRecordUpdateReqDto leaderboardPeriodRecordUpdateReqDto);

        /// <summary>
        /// Update leaderboard period record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="leaderboardPeriodRecordUpdateReqDto"></param>
        /// <returns>ApiResponse of RootLeaderboardPeriodRecordDto</returns>
        ApiResponse<RootLeaderboardPeriodRecordDto> UpdateLeaderboardPeriodRecordWithHttpInfo(string leaderboardId, string periodId, LeaderboardPeriodRecordUpdateReqDto leaderboardPeriodRecordUpdateReqDto);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeaderboardApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get leaderboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootLeaderboardDto</returns>
        System.Threading.Tasks.Task<RootLeaderboardDto> GetLeaderboardAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get leaderboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootLeaderboardDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootLeaderboardDto>> GetLeaderboardWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get leaderboard periods by date range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from">From date in milliseconds (optional)</param>
        /// <param name="to">To date in milliseconds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponseLeaderboardPeriodDtoVoid</returns>
        System.Threading.Tasks.Task<RootListResponseLeaderboardPeriodDtoVoid> GetLeaderboardPeriodsAsync(string id, decimal? from = default(decimal?), decimal? to = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get leaderboard periods by date range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from">From date in milliseconds (optional)</param>
        /// <param name="to">To date in milliseconds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponseLeaderboardPeriodDtoVoid)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootListResponseLeaderboardPeriodDtoVoid>> GetLeaderboardPeriodsWithHttpInfoAsync(string id, decimal? from = default(decimal?), decimal? to = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list of leaderboards
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPageResponseLeaderboardDtoVoid</returns>
        System.Threading.Tasks.Task<RootPageResponseLeaderboardDtoVoid> GetLeaderboardsAsync(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list of leaderboards
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPageResponseLeaderboardDtoVoid)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootPageResponseLeaderboardDtoVoid>> GetLeaderboardsWithHttpInfoAsync(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get random adjacent participants from the leaderboard period
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="participantId">The participant ID</param>
        /// <param name="limit"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        System.Threading.Tasks.Task<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> GetRandomAdjacentParticipantsAsync(string leaderboardId, string periodId, string participantId, decimal? limit, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get random adjacent participants from the leaderboard period
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="participantId">The participant ID</param>
        /// <param name="limit"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto>> GetRandomAdjacentParticipantsWithHttpInfoAsync(string leaderboardId, string periodId, string participantId, decimal? limit, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Query leaderboard period
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard id</param>
        /// <param name="periodId">The period id</param>
        /// <param name="offset">The offset to query. default&#x3D;0 (optional, default to 0M)</param>
        /// <param name="limit">The limit to query. default&#x3D;100 (optional, default to 100M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        System.Threading.Tasks.Task<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> QueryLeaderboardPeriodAsync(string leaderboardId, string periodId, decimal? offset = default(decimal?), decimal? limit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Query leaderboard period
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard id</param>
        /// <param name="periodId">The period id</param>
        /// <param name="offset">The offset to query. default&#x3D;0 (optional, default to 0M)</param>
        /// <param name="limit">The limit to query. default&#x3D;100 (optional, default to 100M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto>> QueryLeaderboardPeriodWithHttpInfoAsync(string leaderboardId, string periodId, decimal? offset = default(decimal?), decimal? limit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get rank of the participant and their neighbors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="participantId">The participant ID</param>
        /// <param name="gap"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        System.Threading.Tasks.Task<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> QueryParticipantLeaderboardAsync(string leaderboardId, string periodId, string participantId, decimal? gap, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get rank of the participant and their neighbors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="participantId">The participant ID</param>
        /// <param name="gap"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto>> QueryParticipantLeaderboardWithHttpInfoAsync(string leaderboardId, string periodId, string participantId, decimal? gap, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update leaderboard period record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="leaderboardPeriodRecordUpdateReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootLeaderboardPeriodRecordDto</returns>
        System.Threading.Tasks.Task<RootLeaderboardPeriodRecordDto> UpdateLeaderboardPeriodRecordAsync(string leaderboardId, string periodId, LeaderboardPeriodRecordUpdateReqDto leaderboardPeriodRecordUpdateReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update leaderboard period record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="leaderboardPeriodRecordUpdateReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootLeaderboardPeriodRecordDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootLeaderboardPeriodRecordDto>> UpdateLeaderboardPeriodRecordWithHttpInfoAsync(string leaderboardId, string periodId, LeaderboardPeriodRecordUpdateReqDto leaderboardPeriodRecordUpdateReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeaderboardApi : ILeaderboardApiSync, ILeaderboardApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LeaderboardApi : IDisposable, ILeaderboardApi
    {
        private Alohacorp.Durian.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public LeaderboardApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public LeaderboardApi(string basePath)
        {
            this.Configuration = Alohacorp.Durian.Client.Configuration.MergeConfigurations(
                Alohacorp.Durian.Client.GlobalConfiguration.Instance,
                new Alohacorp.Durian.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Alohacorp.Durian.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Alohacorp.Durian.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public LeaderboardApi(Alohacorp.Durian.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alohacorp.Durian.Client.Configuration.MergeConfigurations(
                Alohacorp.Durian.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Alohacorp.Durian.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Alohacorp.Durian.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public LeaderboardApi(Alohacorp.Durian.Client.ISynchronousClient client, Alohacorp.Durian.Client.IAsynchronousClient asyncClient, Alohacorp.Durian.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alohacorp.Durian.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Alohacorp.Durian.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alohacorp.Durian.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alohacorp.Durian.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alohacorp.Durian.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alohacorp.Durian.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get leaderboard 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RootLeaderboardDto</returns>
        public RootLeaderboardDto GetLeaderboard(string id)
        {
            Alohacorp.Durian.Client.ApiResponse<RootLeaderboardDto> localVarResponse = GetLeaderboardWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get leaderboard 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RootLeaderboardDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootLeaderboardDto> GetLeaderboardWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling LeaderboardApi->GetLeaderboard");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootLeaderboardDto>($"/v1/leaderboards/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeaderboard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get leaderboard 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootLeaderboardDto</returns>
        public async System.Threading.Tasks.Task<RootLeaderboardDto> GetLeaderboardAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetLeaderboardWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootLeaderboardDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootLeaderboardDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get leaderboard 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootLeaderboardDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootLeaderboardDto>> GetLeaderboardWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling LeaderboardApi->GetLeaderboard");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootLeaderboardDto>($"/v1/leaderboards/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeaderboard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get leaderboard periods by date range 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from">From date in milliseconds (optional)</param>
        /// <param name="to">To date in milliseconds (optional)</param>
        /// <returns>RootListResponseLeaderboardPeriodDtoVoid</returns>
        public RootListResponseLeaderboardPeriodDtoVoid GetLeaderboardPeriods(string id, decimal? from = default(decimal?), decimal? to = default(decimal?))
        {
            Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodDtoVoid> localVarResponse = GetLeaderboardPeriodsWithHttpInfo(id, from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get leaderboard periods by date range 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from">From date in milliseconds (optional)</param>
        /// <param name="to">To date in milliseconds (optional)</param>
        /// <returns>ApiResponse of RootListResponseLeaderboardPeriodDtoVoid</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodDtoVoid> GetLeaderboardPeriodsWithHttpInfo(string id, decimal? from = default(decimal?), decimal? to = default(decimal?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling LeaderboardApi->GetLeaderboardPeriods");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootListResponseLeaderboardPeriodDtoVoid>($"/v1/leaderboards/{id}/periods", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeaderboardPeriods", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get leaderboard periods by date range 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from">From date in milliseconds (optional)</param>
        /// <param name="to">To date in milliseconds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponseLeaderboardPeriodDtoVoid</returns>
        public async System.Threading.Tasks.Task<RootListResponseLeaderboardPeriodDtoVoid> GetLeaderboardPeriodsAsync(string id, decimal? from = default(decimal?), decimal? to = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetLeaderboardPeriodsWithHttpInfoAsync(id, from, to, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodDtoVoid> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodDtoVoid> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get leaderboard periods by date range 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="from">From date in milliseconds (optional)</param>
        /// <param name="to">To date in milliseconds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponseLeaderboardPeriodDtoVoid)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodDtoVoid>> GetLeaderboardPeriodsWithHttpInfoAsync(string id, decimal? from = default(decimal?), decimal? to = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling LeaderboardApi->GetLeaderboardPeriods");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootListResponseLeaderboardPeriodDtoVoid>($"/v1/leaderboards/{id}/periods", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeaderboardPeriods", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of leaderboards 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>RootPageResponseLeaderboardDtoVoid</returns>
        public RootPageResponseLeaderboardDtoVoid GetLeaderboards(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>))
        {
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseLeaderboardDtoVoid> localVarResponse = GetLeaderboardsWithHttpInfo(page, size, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of leaderboards 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of RootPageResponseLeaderboardDtoVoid</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootPageResponseLeaderboardDtoVoid> GetLeaderboardsWithHttpInfo(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>))
        {
            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootPageResponseLeaderboardDtoVoid>($"/v1/leaderboards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeaderboards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of leaderboards 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPageResponseLeaderboardDtoVoid</returns>
        public async System.Threading.Tasks.Task<RootPageResponseLeaderboardDtoVoid> GetLeaderboardsAsync(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetLeaderboardsWithHttpInfoAsync(page, size, sort, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseLeaderboardDtoVoid> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseLeaderboardDtoVoid> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of leaderboards 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPageResponseLeaderboardDtoVoid)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootPageResponseLeaderboardDtoVoid>> GetLeaderboardsWithHttpInfoAsync(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootPageResponseLeaderboardDtoVoid>($"/v1/leaderboards", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeaderboards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get random adjacent participants from the leaderboard period 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="participantId">The participant ID</param>
        /// <param name="limit"></param>
        /// <returns>RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        public RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto GetRandomAdjacentParticipants(string leaderboardId, string periodId, string participantId, decimal? limit)
        {
            Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> localVarResponse = GetRandomAdjacentParticipantsWithHttpInfo(leaderboardId, periodId, participantId, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get random adjacent participants from the leaderboard period 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="participantId">The participant ID</param>
        /// <param name="limit"></param>
        /// <returns>ApiResponse of RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> GetRandomAdjacentParticipantsWithHttpInfo(string leaderboardId, string periodId, string participantId, decimal? limit)
        {
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardApi->GetRandomAdjacentParticipants");

            // verify the required parameter 'periodId' is set
            if (periodId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'periodId' when calling LeaderboardApi->GetRandomAdjacentParticipants");

            // verify the required parameter 'participantId' is set
            if (participantId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'participantId' when calling LeaderboardApi->GetRandomAdjacentParticipants");

            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'limit' when calling LeaderboardApi->GetRandomAdjacentParticipants");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leaderboardId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leaderboardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("periodId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(periodId)); // path parameter
            localVarRequestOptions.PathParameters.Add("participantId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(participantId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto>($"/v1/leaderboards/{leaderboardId}/periods/{periodId}/participants/{participantId}/adjacent", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRandomAdjacentParticipants", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get random adjacent participants from the leaderboard period 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="participantId">The participant ID</param>
        /// <param name="limit"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        public async System.Threading.Tasks.Task<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> GetRandomAdjacentParticipantsAsync(string leaderboardId, string periodId, string participantId, decimal? limit, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetRandomAdjacentParticipantsWithHttpInfoAsync(leaderboardId, periodId, participantId, limit, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get random adjacent participants from the leaderboard period 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="participantId">The participant ID</param>
        /// <param name="limit"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto>> GetRandomAdjacentParticipantsWithHttpInfoAsync(string leaderboardId, string periodId, string participantId, decimal? limit, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardApi->GetRandomAdjacentParticipants");

            // verify the required parameter 'periodId' is set
            if (periodId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'periodId' when calling LeaderboardApi->GetRandomAdjacentParticipants");

            // verify the required parameter 'participantId' is set
            if (participantId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'participantId' when calling LeaderboardApi->GetRandomAdjacentParticipants");

            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'limit' when calling LeaderboardApi->GetRandomAdjacentParticipants");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leaderboardId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leaderboardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("periodId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(periodId)); // path parameter
            localVarRequestOptions.PathParameters.Add("participantId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(participantId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto>($"/v1/leaderboards/{leaderboardId}/periods/{periodId}/participants/{participantId}/adjacent", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRandomAdjacentParticipants", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query leaderboard period 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard id</param>
        /// <param name="periodId">The period id</param>
        /// <param name="offset">The offset to query. default&#x3D;0 (optional, default to 0M)</param>
        /// <param name="limit">The limit to query. default&#x3D;100 (optional, default to 100M)</param>
        /// <returns>RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        public RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto QueryLeaderboardPeriod(string leaderboardId, string periodId, decimal? offset = default(decimal?), decimal? limit = default(decimal?))
        {
            Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> localVarResponse = QueryLeaderboardPeriodWithHttpInfo(leaderboardId, periodId, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query leaderboard period 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard id</param>
        /// <param name="periodId">The period id</param>
        /// <param name="offset">The offset to query. default&#x3D;0 (optional, default to 0M)</param>
        /// <param name="limit">The limit to query. default&#x3D;100 (optional, default to 100M)</param>
        /// <returns>ApiResponse of RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> QueryLeaderboardPeriodWithHttpInfo(string leaderboardId, string periodId, decimal? offset = default(decimal?), decimal? limit = default(decimal?))
        {
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardApi->QueryLeaderboardPeriod");

            // verify the required parameter 'periodId' is set
            if (periodId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'periodId' when calling LeaderboardApi->QueryLeaderboardPeriod");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leaderboardId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leaderboardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("periodId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(periodId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto>($"/v1/leaderboards/{leaderboardId}/periods/{periodId}/query", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryLeaderboardPeriod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query leaderboard period 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard id</param>
        /// <param name="periodId">The period id</param>
        /// <param name="offset">The offset to query. default&#x3D;0 (optional, default to 0M)</param>
        /// <param name="limit">The limit to query. default&#x3D;100 (optional, default to 100M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        public async System.Threading.Tasks.Task<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> QueryLeaderboardPeriodAsync(string leaderboardId, string periodId, decimal? offset = default(decimal?), decimal? limit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = QueryLeaderboardPeriodWithHttpInfoAsync(leaderboardId, periodId, offset, limit, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query leaderboard period 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard id</param>
        /// <param name="periodId">The period id</param>
        /// <param name="offset">The offset to query. default&#x3D;0 (optional, default to 0M)</param>
        /// <param name="limit">The limit to query. default&#x3D;100 (optional, default to 100M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto>> QueryLeaderboardPeriodWithHttpInfoAsync(string leaderboardId, string periodId, decimal? offset = default(decimal?), decimal? limit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardApi->QueryLeaderboardPeriod");

            // verify the required parameter 'periodId' is set
            if (periodId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'periodId' when calling LeaderboardApi->QueryLeaderboardPeriod");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leaderboardId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leaderboardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("periodId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(periodId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto>($"/v1/leaderboards/{leaderboardId}/periods/{periodId}/query", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryLeaderboardPeriod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get rank of the participant and their neighbors 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="participantId">The participant ID</param>
        /// <param name="gap"></param>
        /// <returns>RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        public RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto QueryParticipantLeaderboard(string leaderboardId, string periodId, string participantId, decimal? gap)
        {
            Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> localVarResponse = QueryParticipantLeaderboardWithHttpInfo(leaderboardId, periodId, participantId, gap);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get rank of the participant and their neighbors 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="participantId">The participant ID</param>
        /// <param name="gap"></param>
        /// <returns>ApiResponse of RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> QueryParticipantLeaderboardWithHttpInfo(string leaderboardId, string periodId, string participantId, decimal? gap)
        {
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardApi->QueryParticipantLeaderboard");

            // verify the required parameter 'periodId' is set
            if (periodId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'periodId' when calling LeaderboardApi->QueryParticipantLeaderboard");

            // verify the required parameter 'participantId' is set
            if (participantId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'participantId' when calling LeaderboardApi->QueryParticipantLeaderboard");

            // verify the required parameter 'gap' is set
            if (gap == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'gap' when calling LeaderboardApi->QueryParticipantLeaderboard");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leaderboardId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leaderboardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("periodId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(periodId)); // path parameter
            localVarRequestOptions.PathParameters.Add("participantId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(participantId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "gap", gap));

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto>($"/v1/leaderboards/{leaderboardId}/periods/{periodId}/participants/{participantId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryParticipantLeaderboard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get rank of the participant and their neighbors 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="participantId">The participant ID</param>
        /// <param name="gap"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto</returns>
        public async System.Threading.Tasks.Task<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> QueryParticipantLeaderboardAsync(string leaderboardId, string periodId, string participantId, decimal? gap, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = QueryParticipantLeaderboardWithHttpInfoAsync(leaderboardId, periodId, participantId, gap, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get rank of the participant and their neighbors 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="participantId">The participant ID</param>
        /// <param name="gap"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto>> QueryParticipantLeaderboardWithHttpInfoAsync(string leaderboardId, string periodId, string participantId, decimal? gap, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardApi->QueryParticipantLeaderboard");

            // verify the required parameter 'periodId' is set
            if (periodId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'periodId' when calling LeaderboardApi->QueryParticipantLeaderboard");

            // verify the required parameter 'participantId' is set
            if (participantId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'participantId' when calling LeaderboardApi->QueryParticipantLeaderboard");

            // verify the required parameter 'gap' is set
            if (gap == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'gap' when calling LeaderboardApi->QueryParticipantLeaderboard");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leaderboardId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leaderboardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("periodId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(periodId)); // path parameter
            localVarRequestOptions.PathParameters.Add("participantId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(participantId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "gap", gap));

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootListResponseLeaderboardPeriodRecordDtoLeaderboardPeriodQueryMetaDto>($"/v1/leaderboards/{leaderboardId}/periods/{periodId}/participants/{participantId}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryParticipantLeaderboard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update leaderboard period record 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="leaderboardPeriodRecordUpdateReqDto"></param>
        /// <returns>RootLeaderboardPeriodRecordDto</returns>
        public RootLeaderboardPeriodRecordDto UpdateLeaderboardPeriodRecord(string leaderboardId, string periodId, LeaderboardPeriodRecordUpdateReqDto leaderboardPeriodRecordUpdateReqDto)
        {
            Alohacorp.Durian.Client.ApiResponse<RootLeaderboardPeriodRecordDto> localVarResponse = UpdateLeaderboardPeriodRecordWithHttpInfo(leaderboardId, periodId, leaderboardPeriodRecordUpdateReqDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update leaderboard period record 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="leaderboardPeriodRecordUpdateReqDto"></param>
        /// <returns>ApiResponse of RootLeaderboardPeriodRecordDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootLeaderboardPeriodRecordDto> UpdateLeaderboardPeriodRecordWithHttpInfo(string leaderboardId, string periodId, LeaderboardPeriodRecordUpdateReqDto leaderboardPeriodRecordUpdateReqDto)
        {
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardApi->UpdateLeaderboardPeriodRecord");

            // verify the required parameter 'periodId' is set
            if (periodId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'periodId' when calling LeaderboardApi->UpdateLeaderboardPeriodRecord");

            // verify the required parameter 'leaderboardPeriodRecordUpdateReqDto' is set
            if (leaderboardPeriodRecordUpdateReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leaderboardPeriodRecordUpdateReqDto' when calling LeaderboardApi->UpdateLeaderboardPeriodRecord");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leaderboardId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leaderboardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("periodId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(periodId)); // path parameter
            localVarRequestOptions.Data = leaderboardPeriodRecordUpdateReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RootLeaderboardPeriodRecordDto>($"/v1/leaderboards/{leaderboardId}/periods/{periodId}/participants", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLeaderboardPeriodRecord", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update leaderboard period record 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="leaderboardPeriodRecordUpdateReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootLeaderboardPeriodRecordDto</returns>
        public async System.Threading.Tasks.Task<RootLeaderboardPeriodRecordDto> UpdateLeaderboardPeriodRecordAsync(string leaderboardId, string periodId, LeaderboardPeriodRecordUpdateReqDto leaderboardPeriodRecordUpdateReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = UpdateLeaderboardPeriodRecordWithHttpInfoAsync(leaderboardId, periodId, leaderboardPeriodRecordUpdateReqDto, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootLeaderboardPeriodRecordDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootLeaderboardPeriodRecordDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update leaderboard period record 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <param name="periodId">The period ID</param>
        /// <param name="leaderboardPeriodRecordUpdateReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootLeaderboardPeriodRecordDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootLeaderboardPeriodRecordDto>> UpdateLeaderboardPeriodRecordWithHttpInfoAsync(string leaderboardId, string periodId, LeaderboardPeriodRecordUpdateReqDto leaderboardPeriodRecordUpdateReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardApi->UpdateLeaderboardPeriodRecord");

            // verify the required parameter 'periodId' is set
            if (periodId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'periodId' when calling LeaderboardApi->UpdateLeaderboardPeriodRecord");

            // verify the required parameter 'leaderboardPeriodRecordUpdateReqDto' is set
            if (leaderboardPeriodRecordUpdateReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leaderboardPeriodRecordUpdateReqDto' when calling LeaderboardApi->UpdateLeaderboardPeriodRecord");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leaderboardId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leaderboardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("periodId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(periodId)); // path parameter
            localVarRequestOptions.Data = leaderboardPeriodRecordUpdateReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<RootLeaderboardPeriodRecordDto>($"/v1/leaderboards/{leaderboardId}/periods/{periodId}/participants", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLeaderboardPeriodRecord", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
