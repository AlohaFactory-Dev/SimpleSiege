/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alohacorp.Durian.Client;
using Alohacorp.Durian.Model;

namespace Alohacorp.Durian.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeagueApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get members of league division
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="leagueSeasonId"></param>
        /// <param name="leagueId"></param>
        /// <param name="leagueDivisionId"></param>
        /// <param name="offset">The offset to query. default&#x3D;0 (optional, default to 0M)</param>
        /// <param name="limit">The limit to query. default&#x3D;100 (optional, default to 100M)</param>
        /// <returns>RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto</returns>
        RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto GetDivisionMembers(string leagueGroupId, string leagueSeasonId, string leagueId, string leagueDivisionId, decimal? offset = default(decimal?), decimal? limit = default(decimal?));

        /// <summary>
        /// Get members of league division
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="leagueSeasonId"></param>
        /// <param name="leagueId"></param>
        /// <param name="leagueDivisionId"></param>
        /// <param name="offset">The offset to query. default&#x3D;0 (optional, default to 0M)</param>
        /// <param name="limit">The limit to query. default&#x3D;100 (optional, default to 100M)</param>
        /// <returns>ApiResponse of RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto</returns>
        ApiResponse<RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto> GetDivisionMembersWithHttpInfo(string leagueGroupId, string leagueSeasonId, string leagueId, string leagueDivisionId, decimal? offset = default(decimal?), decimal? limit = default(decimal?));
        /// <summary>
        /// Get list of league groups
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>RootPageResponseLeagueGroupDtoVoid</returns>
        RootPageResponseLeagueGroupDtoVoid GetLeagueGroups(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>));

        /// <summary>
        /// Get list of league groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of RootPageResponseLeagueGroupDtoVoid</returns>
        ApiResponse<RootPageResponseLeagueGroupDtoVoid> GetLeagueGroupsWithHttpInfo(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>));
        /// <summary>
        /// Get league season by ID
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="leagueSeasonId"></param>
        /// <returns>RootLeagueSeasonDto</returns>
        RootLeagueSeasonDto GetLeagueSeason(string leagueGroupId, string leagueSeasonId);

        /// <summary>
        /// Get league season by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="leagueSeasonId"></param>
        /// <returns>ApiResponse of RootLeagueSeasonDto</returns>
        ApiResponse<RootLeagueSeasonDto> GetLeagueSeasonWithHttpInfo(string leagueGroupId, string leagueSeasonId);
        /// <summary>
        /// Get list of league seasons
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>RootPageResponseLeagueSeasonDtoVoid</returns>
        RootPageResponseLeagueSeasonDtoVoid GetLeagueSeasons(string leagueGroupId, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>));

        /// <summary>
        /// Get list of league seasons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of RootPageResponseLeagueSeasonDtoVoid</returns>
        ApiResponse<RootPageResponseLeagueSeasonDtoVoid> GetLeagueSeasonsWithHttpInfo(string leagueGroupId, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>));
        /// <summary>
        /// Get current player&#39;s league division
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <returns>RootLeagueDivisionDto</returns>
        RootLeagueDivisionDto GetPlayerLeagueDivision(string leagueGroupId, string leagueSeasonId);

        /// <summary>
        /// Get current player&#39;s league division
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <returns>ApiResponse of RootLeagueDivisionDto</returns>
        ApiResponse<RootLeagueDivisionDto> GetPlayerLeagueDivisionWithHttpInfo(string leagueGroupId, string leagueSeasonId);
        /// <summary>
        /// Join league season
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <returns>RootLeagueDivisionDto</returns>
        RootLeagueDivisionDto JoinLeagueSeason(string leagueGroupId, string leagueSeasonId);

        /// <summary>
        /// Join league season
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <returns>ApiResponse of RootLeagueDivisionDto</returns>
        ApiResponse<RootLeagueDivisionDto> JoinLeagueSeasonWithHttpInfo(string leagueGroupId, string leagueSeasonId);
        /// <summary>
        /// Update division record
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <param name="leagueId">The league ID</param>
        /// <param name="leagueDivisionId">The league division ID</param>
        /// <param name="leagueDivisionRecordUpdateReqDto"></param>
        /// <returns>RootLeaderboardPeriodRecordDto</returns>
        RootLeaderboardPeriodRecordDto UpdateDivisionRecord(string leagueGroupId, string leagueSeasonId, string leagueId, string leagueDivisionId, LeagueDivisionRecordUpdateReqDto leagueDivisionRecordUpdateReqDto);

        /// <summary>
        /// Update division record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <param name="leagueId">The league ID</param>
        /// <param name="leagueDivisionId">The league division ID</param>
        /// <param name="leagueDivisionRecordUpdateReqDto"></param>
        /// <returns>ApiResponse of RootLeaderboardPeriodRecordDto</returns>
        ApiResponse<RootLeaderboardPeriodRecordDto> UpdateDivisionRecordWithHttpInfo(string leagueGroupId, string leagueSeasonId, string leagueId, string leagueDivisionId, LeagueDivisionRecordUpdateReqDto leagueDivisionRecordUpdateReqDto);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeagueApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get members of league division
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="leagueSeasonId"></param>
        /// <param name="leagueId"></param>
        /// <param name="leagueDivisionId"></param>
        /// <param name="offset">The offset to query. default&#x3D;0 (optional, default to 0M)</param>
        /// <param name="limit">The limit to query. default&#x3D;100 (optional, default to 100M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto</returns>
        System.Threading.Tasks.Task<RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto> GetDivisionMembersAsync(string leagueGroupId, string leagueSeasonId, string leagueId, string leagueDivisionId, decimal? offset = default(decimal?), decimal? limit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get members of league division
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="leagueSeasonId"></param>
        /// <param name="leagueId"></param>
        /// <param name="leagueDivisionId"></param>
        /// <param name="offset">The offset to query. default&#x3D;0 (optional, default to 0M)</param>
        /// <param name="limit">The limit to query. default&#x3D;100 (optional, default to 100M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto>> GetDivisionMembersWithHttpInfoAsync(string leagueGroupId, string leagueSeasonId, string leagueId, string leagueDivisionId, decimal? offset = default(decimal?), decimal? limit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list of league groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPageResponseLeagueGroupDtoVoid</returns>
        System.Threading.Tasks.Task<RootPageResponseLeagueGroupDtoVoid> GetLeagueGroupsAsync(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list of league groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPageResponseLeagueGroupDtoVoid)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootPageResponseLeagueGroupDtoVoid>> GetLeagueGroupsWithHttpInfoAsync(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get league season by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="leagueSeasonId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootLeagueSeasonDto</returns>
        System.Threading.Tasks.Task<RootLeagueSeasonDto> GetLeagueSeasonAsync(string leagueGroupId, string leagueSeasonId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get league season by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="leagueSeasonId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootLeagueSeasonDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootLeagueSeasonDto>> GetLeagueSeasonWithHttpInfoAsync(string leagueGroupId, string leagueSeasonId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list of league seasons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPageResponseLeagueSeasonDtoVoid</returns>
        System.Threading.Tasks.Task<RootPageResponseLeagueSeasonDtoVoid> GetLeagueSeasonsAsync(string leagueGroupId, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list of league seasons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPageResponseLeagueSeasonDtoVoid)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootPageResponseLeagueSeasonDtoVoid>> GetLeagueSeasonsWithHttpInfoAsync(string leagueGroupId, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get current player&#39;s league division
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootLeagueDivisionDto</returns>
        System.Threading.Tasks.Task<RootLeagueDivisionDto> GetPlayerLeagueDivisionAsync(string leagueGroupId, string leagueSeasonId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get current player&#39;s league division
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootLeagueDivisionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootLeagueDivisionDto>> GetPlayerLeagueDivisionWithHttpInfoAsync(string leagueGroupId, string leagueSeasonId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Join league season
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootLeagueDivisionDto</returns>
        System.Threading.Tasks.Task<RootLeagueDivisionDto> JoinLeagueSeasonAsync(string leagueGroupId, string leagueSeasonId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Join league season
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootLeagueDivisionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootLeagueDivisionDto>> JoinLeagueSeasonWithHttpInfoAsync(string leagueGroupId, string leagueSeasonId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update division record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <param name="leagueId">The league ID</param>
        /// <param name="leagueDivisionId">The league division ID</param>
        /// <param name="leagueDivisionRecordUpdateReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootLeaderboardPeriodRecordDto</returns>
        System.Threading.Tasks.Task<RootLeaderboardPeriodRecordDto> UpdateDivisionRecordAsync(string leagueGroupId, string leagueSeasonId, string leagueId, string leagueDivisionId, LeagueDivisionRecordUpdateReqDto leagueDivisionRecordUpdateReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update division record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <param name="leagueId">The league ID</param>
        /// <param name="leagueDivisionId">The league division ID</param>
        /// <param name="leagueDivisionRecordUpdateReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootLeaderboardPeriodRecordDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootLeaderboardPeriodRecordDto>> UpdateDivisionRecordWithHttpInfoAsync(string leagueGroupId, string leagueSeasonId, string leagueId, string leagueDivisionId, LeagueDivisionRecordUpdateReqDto leagueDivisionRecordUpdateReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeagueApi : ILeagueApiSync, ILeagueApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LeagueApi : IDisposable, ILeagueApi
    {
        private Alohacorp.Durian.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LeagueApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public LeagueApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeagueApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public LeagueApi(string basePath)
        {
            this.Configuration = Alohacorp.Durian.Client.Configuration.MergeConfigurations(
                Alohacorp.Durian.Client.GlobalConfiguration.Instance,
                new Alohacorp.Durian.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Alohacorp.Durian.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Alohacorp.Durian.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeagueApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public LeagueApi(Alohacorp.Durian.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alohacorp.Durian.Client.Configuration.MergeConfigurations(
                Alohacorp.Durian.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Alohacorp.Durian.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Alohacorp.Durian.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeagueApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public LeagueApi(Alohacorp.Durian.Client.ISynchronousClient client, Alohacorp.Durian.Client.IAsynchronousClient asyncClient, Alohacorp.Durian.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alohacorp.Durian.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Alohacorp.Durian.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alohacorp.Durian.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alohacorp.Durian.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alohacorp.Durian.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alohacorp.Durian.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get members of league division 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="leagueSeasonId"></param>
        /// <param name="leagueId"></param>
        /// <param name="leagueDivisionId"></param>
        /// <param name="offset">The offset to query. default&#x3D;0 (optional, default to 0M)</param>
        /// <param name="limit">The limit to query. default&#x3D;100 (optional, default to 100M)</param>
        /// <returns>RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto</returns>
        public RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto GetDivisionMembers(string leagueGroupId, string leagueSeasonId, string leagueId, string leagueDivisionId, decimal? offset = default(decimal?), decimal? limit = default(decimal?))
        {
            Alohacorp.Durian.Client.ApiResponse<RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto> localVarResponse = GetDivisionMembersWithHttpInfo(leagueGroupId, leagueSeasonId, leagueId, leagueDivisionId, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get members of league division 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="leagueSeasonId"></param>
        /// <param name="leagueId"></param>
        /// <param name="leagueDivisionId"></param>
        /// <param name="offset">The offset to query. default&#x3D;0 (optional, default to 0M)</param>
        /// <param name="limit">The limit to query. default&#x3D;100 (optional, default to 100M)</param>
        /// <returns>ApiResponse of RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto> GetDivisionMembersWithHttpInfo(string leagueGroupId, string leagueSeasonId, string leagueId, string leagueDivisionId, decimal? offset = default(decimal?), decimal? limit = default(decimal?))
        {
            // verify the required parameter 'leagueGroupId' is set
            if (leagueGroupId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueGroupId' when calling LeagueApi->GetDivisionMembers");

            // verify the required parameter 'leagueSeasonId' is set
            if (leagueSeasonId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueSeasonId' when calling LeagueApi->GetDivisionMembers");

            // verify the required parameter 'leagueId' is set
            if (leagueId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueId' when calling LeagueApi->GetDivisionMembers");

            // verify the required parameter 'leagueDivisionId' is set
            if (leagueDivisionId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueDivisionId' when calling LeagueApi->GetDivisionMembers");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leagueGroupId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueGroupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeasonId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueSeasonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueDivisionId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueDivisionId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto>($"/v1/league-groups/{leagueGroupId}/seasons/{leagueSeasonId}/leagues/{leagueId}/division/{leagueDivisionId}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDivisionMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get members of league division 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="leagueSeasonId"></param>
        /// <param name="leagueId"></param>
        /// <param name="leagueDivisionId"></param>
        /// <param name="offset">The offset to query. default&#x3D;0 (optional, default to 0M)</param>
        /// <param name="limit">The limit to query. default&#x3D;100 (optional, default to 100M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto</returns>
        public async System.Threading.Tasks.Task<RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto> GetDivisionMembersAsync(string leagueGroupId, string leagueSeasonId, string leagueId, string leagueDivisionId, decimal? offset = default(decimal?), decimal? limit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetDivisionMembersWithHttpInfoAsync(leagueGroupId, leagueSeasonId, leagueId, leagueDivisionId, offset, limit, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get members of league division 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="leagueSeasonId"></param>
        /// <param name="leagueId"></param>
        /// <param name="leagueDivisionId"></param>
        /// <param name="offset">The offset to query. default&#x3D;0 (optional, default to 0M)</param>
        /// <param name="limit">The limit to query. default&#x3D;100 (optional, default to 100M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto>> GetDivisionMembersWithHttpInfoAsync(string leagueGroupId, string leagueSeasonId, string leagueId, string leagueDivisionId, decimal? offset = default(decimal?), decimal? limit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueGroupId' is set
            if (leagueGroupId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueGroupId' when calling LeagueApi->GetDivisionMembers");

            // verify the required parameter 'leagueSeasonId' is set
            if (leagueSeasonId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueSeasonId' when calling LeagueApi->GetDivisionMembers");

            // verify the required parameter 'leagueId' is set
            if (leagueId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueId' when calling LeagueApi->GetDivisionMembers");

            // verify the required parameter 'leagueDivisionId' is set
            if (leagueDivisionId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueDivisionId' when calling LeagueApi->GetDivisionMembers");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leagueGroupId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueGroupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeasonId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueSeasonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueDivisionId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueDivisionId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootListResponseLeagueDivisionMemberDtoLeagueDivisionQueryMetaDto>($"/v1/league-groups/{leagueGroupId}/seasons/{leagueSeasonId}/leagues/{leagueId}/division/{leagueDivisionId}/members", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDivisionMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of league groups 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>RootPageResponseLeagueGroupDtoVoid</returns>
        public RootPageResponseLeagueGroupDtoVoid GetLeagueGroups(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>))
        {
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseLeagueGroupDtoVoid> localVarResponse = GetLeagueGroupsWithHttpInfo(page, size, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of league groups 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of RootPageResponseLeagueGroupDtoVoid</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootPageResponseLeagueGroupDtoVoid> GetLeagueGroupsWithHttpInfo(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>))
        {
            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootPageResponseLeagueGroupDtoVoid>($"/v1/league-groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeagueGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of league groups 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPageResponseLeagueGroupDtoVoid</returns>
        public async System.Threading.Tasks.Task<RootPageResponseLeagueGroupDtoVoid> GetLeagueGroupsAsync(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetLeagueGroupsWithHttpInfoAsync(page, size, sort, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseLeagueGroupDtoVoid> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseLeagueGroupDtoVoid> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of league groups 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPageResponseLeagueGroupDtoVoid)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootPageResponseLeagueGroupDtoVoid>> GetLeagueGroupsWithHttpInfoAsync(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootPageResponseLeagueGroupDtoVoid>($"/v1/league-groups", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeagueGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get league season by ID 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="leagueSeasonId"></param>
        /// <returns>RootLeagueSeasonDto</returns>
        public RootLeagueSeasonDto GetLeagueSeason(string leagueGroupId, string leagueSeasonId)
        {
            Alohacorp.Durian.Client.ApiResponse<RootLeagueSeasonDto> localVarResponse = GetLeagueSeasonWithHttpInfo(leagueGroupId, leagueSeasonId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get league season by ID 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="leagueSeasonId"></param>
        /// <returns>ApiResponse of RootLeagueSeasonDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootLeagueSeasonDto> GetLeagueSeasonWithHttpInfo(string leagueGroupId, string leagueSeasonId)
        {
            // verify the required parameter 'leagueGroupId' is set
            if (leagueGroupId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueGroupId' when calling LeagueApi->GetLeagueSeason");

            // verify the required parameter 'leagueSeasonId' is set
            if (leagueSeasonId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueSeasonId' when calling LeagueApi->GetLeagueSeason");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leagueGroupId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueGroupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeasonId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueSeasonId)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootLeagueSeasonDto>($"/v1/league-groups/{leagueGroupId}/seasons/{leagueSeasonId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeagueSeason", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get league season by ID 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="leagueSeasonId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootLeagueSeasonDto</returns>
        public async System.Threading.Tasks.Task<RootLeagueSeasonDto> GetLeagueSeasonAsync(string leagueGroupId, string leagueSeasonId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetLeagueSeasonWithHttpInfoAsync(leagueGroupId, leagueSeasonId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootLeagueSeasonDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootLeagueSeasonDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get league season by ID 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="leagueSeasonId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootLeagueSeasonDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootLeagueSeasonDto>> GetLeagueSeasonWithHttpInfoAsync(string leagueGroupId, string leagueSeasonId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueGroupId' is set
            if (leagueGroupId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueGroupId' when calling LeagueApi->GetLeagueSeason");

            // verify the required parameter 'leagueSeasonId' is set
            if (leagueSeasonId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueSeasonId' when calling LeagueApi->GetLeagueSeason");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leagueGroupId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueGroupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeasonId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueSeasonId)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootLeagueSeasonDto>($"/v1/league-groups/{leagueGroupId}/seasons/{leagueSeasonId}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeagueSeason", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of league seasons 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>RootPageResponseLeagueSeasonDtoVoid</returns>
        public RootPageResponseLeagueSeasonDtoVoid GetLeagueSeasons(string leagueGroupId, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>))
        {
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseLeagueSeasonDtoVoid> localVarResponse = GetLeagueSeasonsWithHttpInfo(leagueGroupId, page, size, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of league seasons 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of RootPageResponseLeagueSeasonDtoVoid</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootPageResponseLeagueSeasonDtoVoid> GetLeagueSeasonsWithHttpInfo(string leagueGroupId, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>))
        {
            // verify the required parameter 'leagueGroupId' is set
            if (leagueGroupId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueGroupId' when calling LeagueApi->GetLeagueSeasons");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leagueGroupId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueGroupId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootPageResponseLeagueSeasonDtoVoid>($"/v1/league-groups/{leagueGroupId}/seasons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeagueSeasons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of league seasons 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPageResponseLeagueSeasonDtoVoid</returns>
        public async System.Threading.Tasks.Task<RootPageResponseLeagueSeasonDtoVoid> GetLeagueSeasonsAsync(string leagueGroupId, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetLeagueSeasonsWithHttpInfoAsync(leagueGroupId, page, size, sort, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseLeagueSeasonDtoVoid> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseLeagueSeasonDtoVoid> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of league seasons 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPageResponseLeagueSeasonDtoVoid)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootPageResponseLeagueSeasonDtoVoid>> GetLeagueSeasonsWithHttpInfoAsync(string leagueGroupId, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueGroupId' is set
            if (leagueGroupId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueGroupId' when calling LeagueApi->GetLeagueSeasons");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leagueGroupId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueGroupId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootPageResponseLeagueSeasonDtoVoid>($"/v1/league-groups/{leagueGroupId}/seasons", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeagueSeasons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get current player&#39;s league division 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <returns>RootLeagueDivisionDto</returns>
        public RootLeagueDivisionDto GetPlayerLeagueDivision(string leagueGroupId, string leagueSeasonId)
        {
            Alohacorp.Durian.Client.ApiResponse<RootLeagueDivisionDto> localVarResponse = GetPlayerLeagueDivisionWithHttpInfo(leagueGroupId, leagueSeasonId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get current player&#39;s league division 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <returns>ApiResponse of RootLeagueDivisionDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootLeagueDivisionDto> GetPlayerLeagueDivisionWithHttpInfo(string leagueGroupId, string leagueSeasonId)
        {
            // verify the required parameter 'leagueGroupId' is set
            if (leagueGroupId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueGroupId' when calling LeagueApi->GetPlayerLeagueDivision");

            // verify the required parameter 'leagueSeasonId' is set
            if (leagueSeasonId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueSeasonId' when calling LeagueApi->GetPlayerLeagueDivision");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leagueGroupId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueGroupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeasonId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueSeasonId)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootLeagueDivisionDto>($"/v1/league-groups/{leagueGroupId}/seasons/{leagueSeasonId}/division", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerLeagueDivision", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get current player&#39;s league division 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootLeagueDivisionDto</returns>
        public async System.Threading.Tasks.Task<RootLeagueDivisionDto> GetPlayerLeagueDivisionAsync(string leagueGroupId, string leagueSeasonId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetPlayerLeagueDivisionWithHttpInfoAsync(leagueGroupId, leagueSeasonId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootLeagueDivisionDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootLeagueDivisionDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get current player&#39;s league division 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootLeagueDivisionDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootLeagueDivisionDto>> GetPlayerLeagueDivisionWithHttpInfoAsync(string leagueGroupId, string leagueSeasonId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueGroupId' is set
            if (leagueGroupId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueGroupId' when calling LeagueApi->GetPlayerLeagueDivision");

            // verify the required parameter 'leagueSeasonId' is set
            if (leagueSeasonId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueSeasonId' when calling LeagueApi->GetPlayerLeagueDivision");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leagueGroupId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueGroupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeasonId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueSeasonId)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootLeagueDivisionDto>($"/v1/league-groups/{leagueGroupId}/seasons/{leagueSeasonId}/division", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerLeagueDivision", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Join league season 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <returns>RootLeagueDivisionDto</returns>
        public RootLeagueDivisionDto JoinLeagueSeason(string leagueGroupId, string leagueSeasonId)
        {
            Alohacorp.Durian.Client.ApiResponse<RootLeagueDivisionDto> localVarResponse = JoinLeagueSeasonWithHttpInfo(leagueGroupId, leagueSeasonId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Join league season 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <returns>ApiResponse of RootLeagueDivisionDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootLeagueDivisionDto> JoinLeagueSeasonWithHttpInfo(string leagueGroupId, string leagueSeasonId)
        {
            // verify the required parameter 'leagueGroupId' is set
            if (leagueGroupId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueGroupId' when calling LeagueApi->JoinLeagueSeason");

            // verify the required parameter 'leagueSeasonId' is set
            if (leagueSeasonId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueSeasonId' when calling LeagueApi->JoinLeagueSeason");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leagueGroupId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueGroupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeasonId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueSeasonId)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RootLeagueDivisionDto>($"/v1/league-groups/{leagueGroupId}/seasons/{leagueSeasonId}/join", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JoinLeagueSeason", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Join league season 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootLeagueDivisionDto</returns>
        public async System.Threading.Tasks.Task<RootLeagueDivisionDto> JoinLeagueSeasonAsync(string leagueGroupId, string leagueSeasonId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = JoinLeagueSeasonWithHttpInfoAsync(leagueGroupId, leagueSeasonId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootLeagueDivisionDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootLeagueDivisionDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Join league season 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootLeagueDivisionDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootLeagueDivisionDto>> JoinLeagueSeasonWithHttpInfoAsync(string leagueGroupId, string leagueSeasonId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueGroupId' is set
            if (leagueGroupId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueGroupId' when calling LeagueApi->JoinLeagueSeason");

            // verify the required parameter 'leagueSeasonId' is set
            if (leagueSeasonId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueSeasonId' when calling LeagueApi->JoinLeagueSeason");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leagueGroupId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueGroupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeasonId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueSeasonId)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<RootLeagueDivisionDto>($"/v1/league-groups/{leagueGroupId}/seasons/{leagueSeasonId}/join", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JoinLeagueSeason", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update division record 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <param name="leagueId">The league ID</param>
        /// <param name="leagueDivisionId">The league division ID</param>
        /// <param name="leagueDivisionRecordUpdateReqDto"></param>
        /// <returns>RootLeaderboardPeriodRecordDto</returns>
        public RootLeaderboardPeriodRecordDto UpdateDivisionRecord(string leagueGroupId, string leagueSeasonId, string leagueId, string leagueDivisionId, LeagueDivisionRecordUpdateReqDto leagueDivisionRecordUpdateReqDto)
        {
            Alohacorp.Durian.Client.ApiResponse<RootLeaderboardPeriodRecordDto> localVarResponse = UpdateDivisionRecordWithHttpInfo(leagueGroupId, leagueSeasonId, leagueId, leagueDivisionId, leagueDivisionRecordUpdateReqDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update division record 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <param name="leagueId">The league ID</param>
        /// <param name="leagueDivisionId">The league division ID</param>
        /// <param name="leagueDivisionRecordUpdateReqDto"></param>
        /// <returns>ApiResponse of RootLeaderboardPeriodRecordDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootLeaderboardPeriodRecordDto> UpdateDivisionRecordWithHttpInfo(string leagueGroupId, string leagueSeasonId, string leagueId, string leagueDivisionId, LeagueDivisionRecordUpdateReqDto leagueDivisionRecordUpdateReqDto)
        {
            // verify the required parameter 'leagueGroupId' is set
            if (leagueGroupId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueGroupId' when calling LeagueApi->UpdateDivisionRecord");

            // verify the required parameter 'leagueSeasonId' is set
            if (leagueSeasonId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueSeasonId' when calling LeagueApi->UpdateDivisionRecord");

            // verify the required parameter 'leagueId' is set
            if (leagueId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueId' when calling LeagueApi->UpdateDivisionRecord");

            // verify the required parameter 'leagueDivisionId' is set
            if (leagueDivisionId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueDivisionId' when calling LeagueApi->UpdateDivisionRecord");

            // verify the required parameter 'leagueDivisionRecordUpdateReqDto' is set
            if (leagueDivisionRecordUpdateReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueDivisionRecordUpdateReqDto' when calling LeagueApi->UpdateDivisionRecord");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leagueGroupId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueGroupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeasonId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueSeasonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueDivisionId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueDivisionId)); // path parameter
            localVarRequestOptions.Data = leagueDivisionRecordUpdateReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RootLeaderboardPeriodRecordDto>($"/v1/league-groups/{leagueGroupId}/seasons/{leagueSeasonId}/leagues/{leagueId}/division/{leagueDivisionId}/record", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDivisionRecord", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update division record 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <param name="leagueId">The league ID</param>
        /// <param name="leagueDivisionId">The league division ID</param>
        /// <param name="leagueDivisionRecordUpdateReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootLeaderboardPeriodRecordDto</returns>
        public async System.Threading.Tasks.Task<RootLeaderboardPeriodRecordDto> UpdateDivisionRecordAsync(string leagueGroupId, string leagueSeasonId, string leagueId, string leagueDivisionId, LeagueDivisionRecordUpdateReqDto leagueDivisionRecordUpdateReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = UpdateDivisionRecordWithHttpInfoAsync(leagueGroupId, leagueSeasonId, leagueId, leagueDivisionId, leagueDivisionRecordUpdateReqDto, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootLeaderboardPeriodRecordDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootLeaderboardPeriodRecordDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update division record 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueGroupId">The league group ID</param>
        /// <param name="leagueSeasonId">The league season ID</param>
        /// <param name="leagueId">The league ID</param>
        /// <param name="leagueDivisionId">The league division ID</param>
        /// <param name="leagueDivisionRecordUpdateReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootLeaderboardPeriodRecordDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootLeaderboardPeriodRecordDto>> UpdateDivisionRecordWithHttpInfoAsync(string leagueGroupId, string leagueSeasonId, string leagueId, string leagueDivisionId, LeagueDivisionRecordUpdateReqDto leagueDivisionRecordUpdateReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueGroupId' is set
            if (leagueGroupId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueGroupId' when calling LeagueApi->UpdateDivisionRecord");

            // verify the required parameter 'leagueSeasonId' is set
            if (leagueSeasonId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueSeasonId' when calling LeagueApi->UpdateDivisionRecord");

            // verify the required parameter 'leagueId' is set
            if (leagueId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueId' when calling LeagueApi->UpdateDivisionRecord");

            // verify the required parameter 'leagueDivisionId' is set
            if (leagueDivisionId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueDivisionId' when calling LeagueApi->UpdateDivisionRecord");

            // verify the required parameter 'leagueDivisionRecordUpdateReqDto' is set
            if (leagueDivisionRecordUpdateReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'leagueDivisionRecordUpdateReqDto' when calling LeagueApi->UpdateDivisionRecord");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leagueGroupId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueGroupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeasonId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueSeasonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueId)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueDivisionId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(leagueDivisionId)); // path parameter
            localVarRequestOptions.Data = leagueDivisionRecordUpdateReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<RootLeaderboardPeriodRecordDto>($"/v1/league-groups/{leagueGroupId}/seasons/{leagueSeasonId}/leagues/{leagueId}/division/{leagueDivisionId}/record", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDivisionRecord", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
