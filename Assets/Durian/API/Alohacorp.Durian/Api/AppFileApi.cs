/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alohacorp.Durian.Client;
using Alohacorp.Durian.Model;

namespace Alohacorp.Durian.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppFileApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a app file by id
        /// </summary>
        /// <remarks>
        ///  Get a app file by id. The content of the file will be encoded in base64.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>RootAppFileDto</returns>
        RootAppFileDto GetAppFileById(string fileId);

        /// <summary>
        /// Get a app file by id
        /// </summary>
        /// <remarks>
        ///  Get a app file by id. The content of the file will be encoded in base64.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>ApiResponse of RootAppFileDto</returns>
        ApiResponse<RootAppFileDto> GetAppFileByIdWithHttpInfo(string fileId);
        /// <summary>
        /// Get list of app files
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="ascending"> (optional)</param>
        /// <param name="startAt"> (optional)</param>
        /// <param name="endAt"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RootListResponseAppFileDtoQueryResponseMetadata</returns>
        RootListResponseAppFileDtoQueryResponseMetadata GetAppFiles(Object orderBy = default(Object), Object ascending = default(Object), Object startAt = default(Object), Object endAt = default(Object), Object startKey = default(Object), Object limit = default(Object));

        /// <summary>
        /// Get list of app files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="ascending"> (optional)</param>
        /// <param name="startAt"> (optional)</param>
        /// <param name="endAt"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RootListResponseAppFileDtoQueryResponseMetadata</returns>
        ApiResponse<RootListResponseAppFileDtoQueryResponseMetadata> GetAppFilesWithHttpInfo(Object orderBy = default(Object), Object ascending = default(Object), Object startAt = default(Object), Object endAt = default(Object), Object startKey = default(Object), Object limit = default(Object));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppFileApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a app file by id
        /// </summary>
        /// <remarks>
        ///  Get a app file by id. The content of the file will be encoded in base64.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootAppFileDto</returns>
        System.Threading.Tasks.Task<RootAppFileDto> GetAppFileByIdAsync(string fileId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a app file by id
        /// </summary>
        /// <remarks>
        ///  Get a app file by id. The content of the file will be encoded in base64.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootAppFileDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootAppFileDto>> GetAppFileByIdWithHttpInfoAsync(string fileId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list of app files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="ascending"> (optional)</param>
        /// <param name="startAt"> (optional)</param>
        /// <param name="endAt"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponseAppFileDtoQueryResponseMetadata</returns>
        System.Threading.Tasks.Task<RootListResponseAppFileDtoQueryResponseMetadata> GetAppFilesAsync(Object orderBy = default(Object), Object ascending = default(Object), Object startAt = default(Object), Object endAt = default(Object), Object startKey = default(Object), Object limit = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list of app files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="ascending"> (optional)</param>
        /// <param name="startAt"> (optional)</param>
        /// <param name="endAt"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponseAppFileDtoQueryResponseMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootListResponseAppFileDtoQueryResponseMetadata>> GetAppFilesWithHttpInfoAsync(Object orderBy = default(Object), Object ascending = default(Object), Object startAt = default(Object), Object endAt = default(Object), Object startKey = default(Object), Object limit = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppFileApi : IAppFileApiSync, IAppFileApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppFileApi : IDisposable, IAppFileApi
    {
        private Alohacorp.Durian.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppFileApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AppFileApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppFileApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AppFileApi(string basePath)
        {
            this.Configuration = Alohacorp.Durian.Client.Configuration.MergeConfigurations(
                Alohacorp.Durian.Client.GlobalConfiguration.Instance,
                new Alohacorp.Durian.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Alohacorp.Durian.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Alohacorp.Durian.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppFileApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AppFileApi(Alohacorp.Durian.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alohacorp.Durian.Client.Configuration.MergeConfigurations(
                Alohacorp.Durian.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Alohacorp.Durian.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Alohacorp.Durian.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppFileApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AppFileApi(Alohacorp.Durian.Client.ISynchronousClient client, Alohacorp.Durian.Client.IAsynchronousClient asyncClient, Alohacorp.Durian.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alohacorp.Durian.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Alohacorp.Durian.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alohacorp.Durian.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alohacorp.Durian.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alohacorp.Durian.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alohacorp.Durian.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a app file by id  Get a app file by id. The content of the file will be encoded in base64.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>RootAppFileDto</returns>
        public RootAppFileDto GetAppFileById(string fileId)
        {
            Alohacorp.Durian.Client.ApiResponse<RootAppFileDto> localVarResponse = GetAppFileByIdWithHttpInfo(fileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a app file by id  Get a app file by id. The content of the file will be encoded in base64.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <returns>ApiResponse of RootAppFileDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootAppFileDto> GetAppFileByIdWithHttpInfo(string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'fileId' when calling AppFileApi->GetAppFileById");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fileId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(fileId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<RootAppFileDto>($"/v1/app-files/{fileId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAppFileById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a app file by id  Get a app file by id. The content of the file will be encoded in base64.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootAppFileDto</returns>
        public async System.Threading.Tasks.Task<RootAppFileDto> GetAppFileByIdAsync(string fileId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAppFileByIdWithHttpInfoAsync(fileId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootAppFileDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootAppFileDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a app file by id  Get a app file by id. The content of the file will be encoded in base64.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootAppFileDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootAppFileDto>> GetAppFileByIdWithHttpInfoAsync(string fileId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'fileId' when calling AppFileApi->GetAppFileById");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fileId", Alohacorp.Durian.Client.ClientUtils.ParameterToString(fileId)); // path parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootAppFileDto>($"/v1/app-files/{fileId}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAppFileById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of app files 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="ascending"> (optional)</param>
        /// <param name="startAt"> (optional)</param>
        /// <param name="endAt"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>RootListResponseAppFileDtoQueryResponseMetadata</returns>
        public RootListResponseAppFileDtoQueryResponseMetadata GetAppFiles(Object orderBy = default(Object), Object ascending = default(Object), Object startAt = default(Object), Object endAt = default(Object), Object startKey = default(Object), Object limit = default(Object))
        {
            Alohacorp.Durian.Client.ApiResponse<RootListResponseAppFileDtoQueryResponseMetadata> localVarResponse = GetAppFilesWithHttpInfo(orderBy, ascending, startAt, endAt, startKey, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of app files 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="ascending"> (optional)</param>
        /// <param name="startAt"> (optional)</param>
        /// <param name="endAt"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of RootListResponseAppFileDtoQueryResponseMetadata</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootListResponseAppFileDtoQueryResponseMetadata> GetAppFilesWithHttpInfo(Object orderBy = default(Object), Object ascending = default(Object), Object startAt = default(Object), Object endAt = default(Object), Object startKey = default(Object), Object limit = default(Object))
        {
            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (ascending != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "ascending", ascending));
            }
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "startAt", startAt));
            }
            if (endAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "endAt", endAt));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "startKey", startKey));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<RootListResponseAppFileDtoQueryResponseMetadata>($"/v1/app-files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAppFiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of app files 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="ascending"> (optional)</param>
        /// <param name="startAt"> (optional)</param>
        /// <param name="endAt"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponseAppFileDtoQueryResponseMetadata</returns>
        public async System.Threading.Tasks.Task<RootListResponseAppFileDtoQueryResponseMetadata> GetAppFilesAsync(Object orderBy = default(Object), Object ascending = default(Object), Object startAt = default(Object), Object endAt = default(Object), Object startKey = default(Object), Object limit = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAppFilesWithHttpInfoAsync(orderBy, ascending, startAt, endAt, startKey, limit, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootListResponseAppFileDtoQueryResponseMetadata> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootListResponseAppFileDtoQueryResponseMetadata> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of app files 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="ascending"> (optional)</param>
        /// <param name="startAt"> (optional)</param>
        /// <param name="endAt"> (optional)</param>
        /// <param name="startKey"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponseAppFileDtoQueryResponseMetadata)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootListResponseAppFileDtoQueryResponseMetadata>> GetAppFilesWithHttpInfoAsync(Object orderBy = default(Object), Object ascending = default(Object), Object startAt = default(Object), Object endAt = default(Object), Object startKey = default(Object), Object limit = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (ascending != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "ascending", ascending));
            }
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "startAt", startAt));
            }
            if (endAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "endAt", endAt));
            }
            if (startKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "startKey", startKey));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootListResponseAppFileDtoQueryResponseMetadata>($"/v1/app-files", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAppFiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
