/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alohacorp.Durian.Client;
using Alohacorp.Durian.Model;

namespace Alohacorp.Durian.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGuildApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Contribute to guild
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contribution"></param>
        /// <returns>RootVoid</returns>
        RootVoid ContributeGuild(string id, int? contribution);

        /// <summary>
        /// Contribute to guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contribution"></param>
        /// <returns>ApiResponse of RootVoid</returns>
        ApiResponse<RootVoid> ContributeGuildWithHttpInfo(string id, int? contribution);
        /// <summary>
        /// Create guild
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGuildReqDto"></param>
        /// <returns>RootGuildDto</returns>
        RootGuildDto CreateGuild(CreateGuildReqDto createGuildReqDto);

        /// <summary>
        /// Create guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGuildReqDto"></param>
        /// <returns>ApiResponse of RootGuildDto</returns>
        ApiResponse<RootGuildDto> CreateGuildWithHttpInfo(CreateGuildReqDto createGuildReqDto);
        /// <summary>
        /// Delete a guild
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RootVoid</returns>
        RootVoid DeleteGuild(string id);

        /// <summary>
        /// Delete a guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RootVoid</returns>
        ApiResponse<RootVoid> DeleteGuildWithHttpInfo(string id);
        /// <summary>
        /// Edit guild
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editGuildReqDto"></param>
        /// <returns>RootGuildDto</returns>
        RootGuildDto EditGuild(string id, EditGuildReqDto editGuildReqDto);

        /// <summary>
        /// Edit guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editGuildReqDto"></param>
        /// <returns>ApiResponse of RootGuildDto</returns>
        ApiResponse<RootGuildDto> EditGuildWithHttpInfo(string id, EditGuildReqDto editGuildReqDto);
        /// <summary>
        /// Edit role of guild member
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="role">Role to set</param>
        /// <returns>RootGuildMemberDto</returns>
        RootGuildMemberDto EditGuildMemberRole(string id, string playerUid, string role);

        /// <summary>
        /// Edit role of guild member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="role">Role to set</param>
        /// <returns>ApiResponse of RootGuildMemberDto</returns>
        ApiResponse<RootGuildMemberDto> EditGuildMemberRoleWithHttpInfo(string id, string playerUid, string role);
        /// <summary>
        /// Get guild
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RootGuildDto</returns>
        RootGuildDto GetGuild(string id);

        /// <summary>
        /// Get guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RootGuildDto</returns>
        ApiResponse<RootGuildDto> GetGuildWithHttpInfo(string id);
        /// <summary>
        /// Get guild applications
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>RootPageResponseGuildApplicationDtoVoid</returns>
        RootPageResponseGuildApplicationDtoVoid GetGuildApplications(string id, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>));

        /// <summary>
        /// Get guild applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of RootPageResponseGuildApplicationDtoVoid</returns>
        ApiResponse<RootPageResponseGuildApplicationDtoVoid> GetGuildApplicationsWithHttpInfo(string id, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>));
        /// <summary>
        /// Get guild logs
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>RootPageResponseGuildLogDtoVoid</returns>
        RootPageResponseGuildLogDtoVoid GetGuildLogs(string id, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>));

        /// <summary>
        /// Get guild logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of RootPageResponseGuildLogDtoVoid</returns>
        ApiResponse<RootPageResponseGuildLogDtoVoid> GetGuildLogsWithHttpInfo(string id, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>));
        /// <summary>
        /// Get list of guilds
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>RootPageResponseGuildDtoVoid</returns>
        RootPageResponseGuildDtoVoid GetGuilds(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>));

        /// <summary>
        /// Get list of guilds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of RootPageResponseGuildDtoVoid</returns>
        ApiResponse<RootPageResponseGuildDtoVoid> GetGuildsWithHttpInfo(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>));
        /// <summary>
        /// Handle guild application
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="accept"></param>
        /// <returns>RootVoid</returns>
        RootVoid HandleGuildApplication(string id, string playerUid, bool accept);

        /// <summary>
        /// Handle guild application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="accept"></param>
        /// <returns>ApiResponse of RootVoid</returns>
        ApiResponse<RootVoid> HandleGuildApplicationWithHttpInfo(string id, string playerUid, bool accept);
        /// <summary>
        /// Join guild
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RootVoid</returns>
        RootVoid JoinGuild(string id);

        /// <summary>
        /// Join guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RootVoid</returns>
        ApiResponse<RootVoid> JoinGuildWithHttpInfo(string id);
        /// <summary>
        /// Kick member from guild
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <returns>RootVoid</returns>
        RootVoid KickGuildMember(string id, string playerUid);

        /// <summary>
        /// Kick member from guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <returns>ApiResponse of RootVoid</returns>
        ApiResponse<RootVoid> KickGuildMemberWithHttpInfo(string id, string playerUid);
        /// <summary>
        /// Leave guild
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RootVoid</returns>
        RootVoid LeaveGuild(string id);

        /// <summary>
        /// Leave guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RootVoid</returns>
        ApiResponse<RootVoid> LeaveGuildWithHttpInfo(string id);
        /// <summary>
        /// List guild members
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RootListResponseGuildMemberDtoVoid</returns>
        RootListResponseGuildMemberDtoVoid ListGuildMembers(string id);

        /// <summary>
        /// List guild members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RootListResponseGuildMemberDtoVoid</returns>
        ApiResponse<RootListResponseGuildMemberDtoVoid> ListGuildMembersWithHttpInfo(string id);
        /// <summary>
        /// Query guilds
        /// </summary>
        /// <remarks>
        ///              Query guilds by name, country, join approval type             Records are sorted by similarity to the name when name is provided.             Records are sorted randomly otherwise.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="joinApprovalType"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <returns>RootListResponseGuildDtoGuildQueryMetaDto</returns>
        RootListResponseGuildDtoGuildQueryMetaDto QueryGuilds(string name = default(string), string country = default(string), string joinApprovalType = default(string), int? limit = default(int?));

        /// <summary>
        /// Query guilds
        /// </summary>
        /// <remarks>
        ///              Query guilds by name, country, join approval type             Records are sorted by similarity to the name when name is provided.             Records are sorted randomly otherwise.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="joinApprovalType"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <returns>ApiResponse of RootListResponseGuildDtoGuildQueryMetaDto</returns>
        ApiResponse<RootListResponseGuildDtoGuildQueryMetaDto> QueryGuildsWithHttpInfo(string name = default(string), string country = default(string), string joinApprovalType = default(string), int? limit = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGuildApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Contribute to guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contribution"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootVoid</returns>
        System.Threading.Tasks.Task<RootVoid> ContributeGuildAsync(string id, int? contribution, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Contribute to guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contribution"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootVoid)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootVoid>> ContributeGuildWithHttpInfoAsync(string id, int? contribution, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGuildReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootGuildDto</returns>
        System.Threading.Tasks.Task<RootGuildDto> CreateGuildAsync(CreateGuildReqDto createGuildReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGuildReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootGuildDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootGuildDto>> CreateGuildWithHttpInfoAsync(CreateGuildReqDto createGuildReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootVoid</returns>
        System.Threading.Tasks.Task<RootVoid> DeleteGuildAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootVoid)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootVoid>> DeleteGuildWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editGuildReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootGuildDto</returns>
        System.Threading.Tasks.Task<RootGuildDto> EditGuildAsync(string id, EditGuildReqDto editGuildReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editGuildReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootGuildDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootGuildDto>> EditGuildWithHttpInfoAsync(string id, EditGuildReqDto editGuildReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit role of guild member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="role">Role to set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootGuildMemberDto</returns>
        System.Threading.Tasks.Task<RootGuildMemberDto> EditGuildMemberRoleAsync(string id, string playerUid, string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit role of guild member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="role">Role to set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootGuildMemberDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootGuildMemberDto>> EditGuildMemberRoleWithHttpInfoAsync(string id, string playerUid, string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootGuildDto</returns>
        System.Threading.Tasks.Task<RootGuildDto> GetGuildAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootGuildDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootGuildDto>> GetGuildWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get guild applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPageResponseGuildApplicationDtoVoid</returns>
        System.Threading.Tasks.Task<RootPageResponseGuildApplicationDtoVoid> GetGuildApplicationsAsync(string id, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get guild applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPageResponseGuildApplicationDtoVoid)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootPageResponseGuildApplicationDtoVoid>> GetGuildApplicationsWithHttpInfoAsync(string id, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get guild logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPageResponseGuildLogDtoVoid</returns>
        System.Threading.Tasks.Task<RootPageResponseGuildLogDtoVoid> GetGuildLogsAsync(string id, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get guild logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPageResponseGuildLogDtoVoid)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootPageResponseGuildLogDtoVoid>> GetGuildLogsWithHttpInfoAsync(string id, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list of guilds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPageResponseGuildDtoVoid</returns>
        System.Threading.Tasks.Task<RootPageResponseGuildDtoVoid> GetGuildsAsync(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list of guilds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPageResponseGuildDtoVoid)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootPageResponseGuildDtoVoid>> GetGuildsWithHttpInfoAsync(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Handle guild application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="accept"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootVoid</returns>
        System.Threading.Tasks.Task<RootVoid> HandleGuildApplicationAsync(string id, string playerUid, bool accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Handle guild application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="accept"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootVoid)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootVoid>> HandleGuildApplicationWithHttpInfoAsync(string id, string playerUid, bool accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Join guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootVoid</returns>
        System.Threading.Tasks.Task<RootVoid> JoinGuildAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Join guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootVoid)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootVoid>> JoinGuildWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Kick member from guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootVoid</returns>
        System.Threading.Tasks.Task<RootVoid> KickGuildMemberAsync(string id, string playerUid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Kick member from guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootVoid)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootVoid>> KickGuildMemberWithHttpInfoAsync(string id, string playerUid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Leave guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootVoid</returns>
        System.Threading.Tasks.Task<RootVoid> LeaveGuildAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Leave guild
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootVoid)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootVoid>> LeaveGuildWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List guild members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponseGuildMemberDtoVoid</returns>
        System.Threading.Tasks.Task<RootListResponseGuildMemberDtoVoid> ListGuildMembersAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List guild members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponseGuildMemberDtoVoid)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootListResponseGuildMemberDtoVoid>> ListGuildMembersWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Query guilds
        /// </summary>
        /// <remarks>
        ///              Query guilds by name, country, join approval type             Records are sorted by similarity to the name when name is provided.             Records are sorted randomly otherwise.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="joinApprovalType"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponseGuildDtoGuildQueryMetaDto</returns>
        System.Threading.Tasks.Task<RootListResponseGuildDtoGuildQueryMetaDto> QueryGuildsAsync(string name = default(string), string country = default(string), string joinApprovalType = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Query guilds
        /// </summary>
        /// <remarks>
        ///              Query guilds by name, country, join approval type             Records are sorted by similarity to the name when name is provided.             Records are sorted randomly otherwise.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="joinApprovalType"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponseGuildDtoGuildQueryMetaDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootListResponseGuildDtoGuildQueryMetaDto>> QueryGuildsWithHttpInfoAsync(string name = default(string), string country = default(string), string joinApprovalType = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGuildApi : IGuildApiSync, IGuildApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GuildApi : IDisposable, IGuildApi
    {
        private Alohacorp.Durian.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GuildApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public GuildApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GuildApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public GuildApi(string basePath)
        {
            this.Configuration = Alohacorp.Durian.Client.Configuration.MergeConfigurations(
                Alohacorp.Durian.Client.GlobalConfiguration.Instance,
                new Alohacorp.Durian.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Alohacorp.Durian.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Alohacorp.Durian.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GuildApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public GuildApi(Alohacorp.Durian.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alohacorp.Durian.Client.Configuration.MergeConfigurations(
                Alohacorp.Durian.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Alohacorp.Durian.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Alohacorp.Durian.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GuildApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public GuildApi(Alohacorp.Durian.Client.ISynchronousClient client, Alohacorp.Durian.Client.IAsynchronousClient asyncClient, Alohacorp.Durian.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alohacorp.Durian.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Alohacorp.Durian.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alohacorp.Durian.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alohacorp.Durian.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alohacorp.Durian.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alohacorp.Durian.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Contribute to guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contribution"></param>
        /// <returns>RootVoid</returns>
        public RootVoid ContributeGuild(string id, int? contribution)
        {
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = ContributeGuildWithHttpInfo(id, contribution);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Contribute to guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contribution"></param>
        /// <returns>ApiResponse of RootVoid</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootVoid> ContributeGuildWithHttpInfo(string id, int? contribution)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->ContributeGuild");

            // verify the required parameter 'contribution' is set
            if (contribution == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'contribution' when calling GuildApi->ContributeGuild");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "contribution", contribution));

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RootVoid>($"/v1/guilds/{id}/contribute", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContributeGuild", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Contribute to guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contribution"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootVoid</returns>
        public async System.Threading.Tasks.Task<RootVoid> ContributeGuildAsync(string id, int? contribution, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ContributeGuildWithHttpInfoAsync(id, contribution, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Contribute to guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="contribution"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootVoid)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootVoid>> ContributeGuildWithHttpInfoAsync(string id, int? contribution, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->ContributeGuild");

            // verify the required parameter 'contribution' is set
            if (contribution == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'contribution' when calling GuildApi->ContributeGuild");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "contribution", contribution));

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<RootVoid>($"/v1/guilds/{id}/contribute", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContributeGuild", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGuildReqDto"></param>
        /// <returns>RootGuildDto</returns>
        public RootGuildDto CreateGuild(CreateGuildReqDto createGuildReqDto)
        {
            Alohacorp.Durian.Client.ApiResponse<RootGuildDto> localVarResponse = CreateGuildWithHttpInfo(createGuildReqDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGuildReqDto"></param>
        /// <returns>ApiResponse of RootGuildDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootGuildDto> CreateGuildWithHttpInfo(CreateGuildReqDto createGuildReqDto)
        {
            // verify the required parameter 'createGuildReqDto' is set
            if (createGuildReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'createGuildReqDto' when calling GuildApi->CreateGuild");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createGuildReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RootGuildDto>($"/v1/guilds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGuild", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGuildReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootGuildDto</returns>
        public async System.Threading.Tasks.Task<RootGuildDto> CreateGuildAsync(CreateGuildReqDto createGuildReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateGuildWithHttpInfoAsync(createGuildReqDto, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootGuildDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootGuildDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGuildReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootGuildDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootGuildDto>> CreateGuildWithHttpInfoAsync(CreateGuildReqDto createGuildReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createGuildReqDto' is set
            if (createGuildReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'createGuildReqDto' when calling GuildApi->CreateGuild");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createGuildReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<RootGuildDto>($"/v1/guilds", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGuild", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RootVoid</returns>
        public RootVoid DeleteGuild(string id)
        {
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = DeleteGuildWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RootVoid</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootVoid> DeleteGuildWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->DeleteGuild");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RootVoid>($"/v1/guilds/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGuild", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootVoid</returns>
        public async System.Threading.Tasks.Task<RootVoid> DeleteGuildAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = DeleteGuildWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootVoid)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootVoid>> DeleteGuildWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->DeleteGuild");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<RootVoid>($"/v1/guilds/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGuild", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editGuildReqDto"></param>
        /// <returns>RootGuildDto</returns>
        public RootGuildDto EditGuild(string id, EditGuildReqDto editGuildReqDto)
        {
            Alohacorp.Durian.Client.ApiResponse<RootGuildDto> localVarResponse = EditGuildWithHttpInfo(id, editGuildReqDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editGuildReqDto"></param>
        /// <returns>ApiResponse of RootGuildDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootGuildDto> EditGuildWithHttpInfo(string id, EditGuildReqDto editGuildReqDto)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->EditGuild");

            // verify the required parameter 'editGuildReqDto' is set
            if (editGuildReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'editGuildReqDto' when calling GuildApi->EditGuild");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = editGuildReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<RootGuildDto>($"/v1/guilds/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditGuild", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editGuildReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootGuildDto</returns>
        public async System.Threading.Tasks.Task<RootGuildDto> EditGuildAsync(string id, EditGuildReqDto editGuildReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = EditGuildWithHttpInfoAsync(id, editGuildReqDto, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootGuildDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootGuildDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editGuildReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootGuildDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootGuildDto>> EditGuildWithHttpInfoAsync(string id, EditGuildReqDto editGuildReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->EditGuild");

            // verify the required parameter 'editGuildReqDto' is set
            if (editGuildReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'editGuildReqDto' when calling GuildApi->EditGuild");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = editGuildReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<RootGuildDto>($"/v1/guilds/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditGuild", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit role of guild member 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="role">Role to set</param>
        /// <returns>RootGuildMemberDto</returns>
        public RootGuildMemberDto EditGuildMemberRole(string id, string playerUid, string role)
        {
            Alohacorp.Durian.Client.ApiResponse<RootGuildMemberDto> localVarResponse = EditGuildMemberRoleWithHttpInfo(id, playerUid, role);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit role of guild member 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="role">Role to set</param>
        /// <returns>ApiResponse of RootGuildMemberDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootGuildMemberDto> EditGuildMemberRoleWithHttpInfo(string id, string playerUid, string role)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->EditGuildMemberRole");

            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling GuildApi->EditGuildMemberRole");

            // verify the required parameter 'role' is set
            if (role == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'role' when calling GuildApi->EditGuildMemberRole");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "role", role));

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<RootGuildMemberDto>($"/v1/guilds/{id}/members/{playerUid}/edit-role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditGuildMemberRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit role of guild member 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="role">Role to set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootGuildMemberDto</returns>
        public async System.Threading.Tasks.Task<RootGuildMemberDto> EditGuildMemberRoleAsync(string id, string playerUid, string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = EditGuildMemberRoleWithHttpInfoAsync(id, playerUid, role, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootGuildMemberDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootGuildMemberDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit role of guild member 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="role">Role to set</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootGuildMemberDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootGuildMemberDto>> EditGuildMemberRoleWithHttpInfoAsync(string id, string playerUid, string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->EditGuildMemberRole");

            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling GuildApi->EditGuildMemberRole");

            // verify the required parameter 'role' is set
            if (role == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'role' when calling GuildApi->EditGuildMemberRole");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "role", role));

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<RootGuildMemberDto>($"/v1/guilds/{id}/members/{playerUid}/edit-role", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditGuildMemberRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RootGuildDto</returns>
        public RootGuildDto GetGuild(string id)
        {
            Alohacorp.Durian.Client.ApiResponse<RootGuildDto> localVarResponse = GetGuildWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RootGuildDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootGuildDto> GetGuildWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->GetGuild");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootGuildDto>($"/v1/guilds/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuild", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootGuildDto</returns>
        public async System.Threading.Tasks.Task<RootGuildDto> GetGuildAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetGuildWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootGuildDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootGuildDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootGuildDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootGuildDto>> GetGuildWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->GetGuild");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootGuildDto>($"/v1/guilds/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuild", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get guild applications 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>RootPageResponseGuildApplicationDtoVoid</returns>
        public RootPageResponseGuildApplicationDtoVoid GetGuildApplications(string id, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>))
        {
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseGuildApplicationDtoVoid> localVarResponse = GetGuildApplicationsWithHttpInfo(id, page, size, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get guild applications 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of RootPageResponseGuildApplicationDtoVoid</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootPageResponseGuildApplicationDtoVoid> GetGuildApplicationsWithHttpInfo(string id, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->GetGuildApplications");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootPageResponseGuildApplicationDtoVoid>($"/v1/guilds/{id}/applications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuildApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get guild applications 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPageResponseGuildApplicationDtoVoid</returns>
        public async System.Threading.Tasks.Task<RootPageResponseGuildApplicationDtoVoid> GetGuildApplicationsAsync(string id, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetGuildApplicationsWithHttpInfoAsync(id, page, size, sort, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseGuildApplicationDtoVoid> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseGuildApplicationDtoVoid> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get guild applications 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPageResponseGuildApplicationDtoVoid)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootPageResponseGuildApplicationDtoVoid>> GetGuildApplicationsWithHttpInfoAsync(string id, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->GetGuildApplications");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootPageResponseGuildApplicationDtoVoid>($"/v1/guilds/{id}/applications", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuildApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get guild logs 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>RootPageResponseGuildLogDtoVoid</returns>
        public RootPageResponseGuildLogDtoVoid GetGuildLogs(string id, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>))
        {
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseGuildLogDtoVoid> localVarResponse = GetGuildLogsWithHttpInfo(id, page, size, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get guild logs 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of RootPageResponseGuildLogDtoVoid</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootPageResponseGuildLogDtoVoid> GetGuildLogsWithHttpInfo(string id, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->GetGuildLogs");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootPageResponseGuildLogDtoVoid>($"/v1/guilds/{id}/logs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuildLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get guild logs 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPageResponseGuildLogDtoVoid</returns>
        public async System.Threading.Tasks.Task<RootPageResponseGuildLogDtoVoid> GetGuildLogsAsync(string id, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetGuildLogsWithHttpInfoAsync(id, page, size, sort, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseGuildLogDtoVoid> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseGuildLogDtoVoid> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get guild logs 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPageResponseGuildLogDtoVoid)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootPageResponseGuildLogDtoVoid>> GetGuildLogsWithHttpInfoAsync(string id, Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->GetGuildLogs");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootPageResponseGuildLogDtoVoid>($"/v1/guilds/{id}/logs", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuildLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of guilds 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>RootPageResponseGuildDtoVoid</returns>
        public RootPageResponseGuildDtoVoid GetGuilds(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>))
        {
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseGuildDtoVoid> localVarResponse = GetGuildsWithHttpInfo(page, size, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of guilds 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of RootPageResponseGuildDtoVoid</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootPageResponseGuildDtoVoid> GetGuildsWithHttpInfo(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>))
        {
            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootPageResponseGuildDtoVoid>($"/v1/guilds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuilds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of guilds 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPageResponseGuildDtoVoid</returns>
        public async System.Threading.Tasks.Task<RootPageResponseGuildDtoVoid> GetGuildsAsync(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetGuildsWithHttpInfoAsync(page, size, sort, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseGuildDtoVoid> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootPageResponseGuildDtoVoid> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of guilds 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Zero-based page index (0..N) (optional)</param>
        /// <param name="size">The size of the page to be returned (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPageResponseGuildDtoVoid)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootPageResponseGuildDtoVoid>> GetGuildsWithHttpInfoAsync(Object page = default(Object), Object size = default(Object), List<Object> sort = default(List<Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("multi", "sort", sort));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootPageResponseGuildDtoVoid>($"/v1/guilds", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGuilds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handle guild application 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="accept"></param>
        /// <returns>RootVoid</returns>
        public RootVoid HandleGuildApplication(string id, string playerUid, bool accept)
        {
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = HandleGuildApplicationWithHttpInfo(id, playerUid, accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Handle guild application 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="accept"></param>
        /// <returns>ApiResponse of RootVoid</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootVoid> HandleGuildApplicationWithHttpInfo(string id, string playerUid, bool accept)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->HandleGuildApplication");

            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling GuildApi->HandleGuildApplication");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "accept", accept));

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RootVoid>($"/v1/guilds/{id}/applications/{playerUid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandleGuildApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Handle guild application 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="accept"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootVoid</returns>
        public async System.Threading.Tasks.Task<RootVoid> HandleGuildApplicationAsync(string id, string playerUid, bool accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = HandleGuildApplicationWithHttpInfoAsync(id, playerUid, accept, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Handle guild application 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="accept"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootVoid)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootVoid>> HandleGuildApplicationWithHttpInfoAsync(string id, string playerUid, bool accept, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->HandleGuildApplication");

            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling GuildApi->HandleGuildApplication");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "accept", accept));

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<RootVoid>($"/v1/guilds/{id}/applications/{playerUid}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HandleGuildApplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Join guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RootVoid</returns>
        public RootVoid JoinGuild(string id)
        {
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = JoinGuildWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Join guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RootVoid</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootVoid> JoinGuildWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->JoinGuild");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RootVoid>($"/v1/guilds/{id}/join", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JoinGuild", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Join guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootVoid</returns>
        public async System.Threading.Tasks.Task<RootVoid> JoinGuildAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = JoinGuildWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Join guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootVoid)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootVoid>> JoinGuildWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->JoinGuild");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<RootVoid>($"/v1/guilds/{id}/join", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JoinGuild", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Kick member from guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <returns>RootVoid</returns>
        public RootVoid KickGuildMember(string id, string playerUid)
        {
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = KickGuildMemberWithHttpInfo(id, playerUid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Kick member from guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <returns>ApiResponse of RootVoid</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootVoid> KickGuildMemberWithHttpInfo(string id, string playerUid)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->KickGuildMember");

            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling GuildApi->KickGuildMember");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RootVoid>($"/v1/guilds/{id}/members/{playerUid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KickGuildMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Kick member from guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootVoid</returns>
        public async System.Threading.Tasks.Task<RootVoid> KickGuildMemberAsync(string id, string playerUid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = KickGuildMemberWithHttpInfoAsync(id, playerUid, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Kick member from guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playerUid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootVoid)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootVoid>> KickGuildMemberWithHttpInfoAsync(string id, string playerUid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->KickGuildMember");

            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling GuildApi->KickGuildMember");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<RootVoid>($"/v1/guilds/{id}/members/{playerUid}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KickGuildMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Leave guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RootVoid</returns>
        public RootVoid LeaveGuild(string id)
        {
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = LeaveGuildWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Leave guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RootVoid</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootVoid> LeaveGuildWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->LeaveGuild");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RootVoid>($"/v1/guilds/{id}/leave", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaveGuild", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Leave guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootVoid</returns>
        public async System.Threading.Tasks.Task<RootVoid> LeaveGuildAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = LeaveGuildWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Leave guild 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootVoid)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootVoid>> LeaveGuildWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->LeaveGuild");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<RootVoid>($"/v1/guilds/{id}/leave", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaveGuild", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List guild members 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>RootListResponseGuildMemberDtoVoid</returns>
        public RootListResponseGuildMemberDtoVoid ListGuildMembers(string id)
        {
            Alohacorp.Durian.Client.ApiResponse<RootListResponseGuildMemberDtoVoid> localVarResponse = ListGuildMembersWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List guild members 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of RootListResponseGuildMemberDtoVoid</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootListResponseGuildMemberDtoVoid> ListGuildMembersWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->ListGuildMembers");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootListResponseGuildMemberDtoVoid>($"/v1/guilds/{id}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListGuildMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List guild members 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponseGuildMemberDtoVoid</returns>
        public async System.Threading.Tasks.Task<RootListResponseGuildMemberDtoVoid> ListGuildMembersAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ListGuildMembersWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootListResponseGuildMemberDtoVoid> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootListResponseGuildMemberDtoVoid> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// List guild members 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponseGuildMemberDtoVoid)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootListResponseGuildMemberDtoVoid>> ListGuildMembersWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'id' when calling GuildApi->ListGuildMembers");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Alohacorp.Durian.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootListResponseGuildMemberDtoVoid>($"/v1/guilds/{id}/members", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListGuildMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query guilds              Query guilds by name, country, join approval type             Records are sorted by similarity to the name when name is provided.             Records are sorted randomly otherwise.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="joinApprovalType"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <returns>RootListResponseGuildDtoGuildQueryMetaDto</returns>
        public RootListResponseGuildDtoGuildQueryMetaDto QueryGuilds(string name = default(string), string country = default(string), string joinApprovalType = default(string), int? limit = default(int?))
        {
            Alohacorp.Durian.Client.ApiResponse<RootListResponseGuildDtoGuildQueryMetaDto> localVarResponse = QueryGuildsWithHttpInfo(name, country, joinApprovalType, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query guilds              Query guilds by name, country, join approval type             Records are sorted by similarity to the name when name is provided.             Records are sorted randomly otherwise.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="joinApprovalType"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <returns>ApiResponse of RootListResponseGuildDtoGuildQueryMetaDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootListResponseGuildDtoGuildQueryMetaDto> QueryGuildsWithHttpInfo(string name = default(string), string country = default(string), string joinApprovalType = default(string), int? limit = default(int?))
        {
            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            if (joinApprovalType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "joinApprovalType", joinApprovalType));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootListResponseGuildDtoGuildQueryMetaDto>($"/v1/guilds/query", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryGuilds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query guilds              Query guilds by name, country, join approval type             Records are sorted by similarity to the name when name is provided.             Records are sorted randomly otherwise.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="joinApprovalType"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponseGuildDtoGuildQueryMetaDto</returns>
        public async System.Threading.Tasks.Task<RootListResponseGuildDtoGuildQueryMetaDto> QueryGuildsAsync(string name = default(string), string country = default(string), string joinApprovalType = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = QueryGuildsWithHttpInfoAsync(name, country, joinApprovalType, limit, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootListResponseGuildDtoGuildQueryMetaDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootListResponseGuildDtoGuildQueryMetaDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query guilds              Query guilds by name, country, join approval type             Records are sorted by similarity to the name when name is provided.             Records are sorted randomly otherwise.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="joinApprovalType"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponseGuildDtoGuildQueryMetaDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootListResponseGuildDtoGuildQueryMetaDto>> QueryGuildsWithHttpInfoAsync(string name = default(string), string country = default(string), string joinApprovalType = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            if (joinApprovalType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "joinApprovalType", joinApprovalType));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alohacorp.Durian.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootListResponseGuildDtoGuildQueryMetaDto>($"/v1/guilds/query", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryGuilds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
