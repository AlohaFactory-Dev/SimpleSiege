/*
 * Durian API - aloha-demo
 *
 * Durian API (aloha-demo) OpenApi Documentation
 *
 * The version of the OpenAPI document: 0.4.12
 * Contact: devlopment@aloha-corp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alohacorp.Durian.Client;
using Alohacorp.Durian.Model;

namespace Alohacorp.Durian.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Block access to current player
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockCurrentPlayerReqDto"></param>
        /// <returns>RootVoid</returns>
        RootVoid BlockAccess(BlockCurrentPlayerReqDto blockCurrentPlayerReqDto);

        /// <summary>
        /// Block access to current player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockCurrentPlayerReqDto"></param>
        /// <returns>ApiResponse of RootVoid</returns>
        ApiResponse<RootVoid> BlockAccessWithHttpInfo(BlockCurrentPlayerReqDto blockCurrentPlayerReqDto);
        /// <summary>
        /// Edit current player data
        /// </summary>
        /// <remarks>
        ///          Edit current player data.         It overwrites the player data with the request body.         If you want to edit player&#39;s game data, use &#x60;/players/{playerUid}/game-data&#x60; endpoint.     
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUpdateReqDto"></param>
        /// <returns>RootPrivatePlayerDto</returns>
        RootPrivatePlayerDto EditPlayers(PlayerUpdateReqDto playerUpdateReqDto);

        /// <summary>
        /// Edit current player data
        /// </summary>
        /// <remarks>
        ///          Edit current player data.         It overwrites the player data with the request body.         If you want to edit player&#39;s game data, use &#x60;/players/{playerUid}/game-data&#x60; endpoint.     
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUpdateReqDto"></param>
        /// <returns>ApiResponse of RootPrivatePlayerDto</returns>
        ApiResponse<RootPrivatePlayerDto> EditPlayersWithHttpInfo(PlayerUpdateReqDto playerUpdateReqDto);
        /// <summary>
        /// Get invitation logs
        /// </summary>
        /// <remarks>
        ///          Get invitation logs.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <returns>RootListResponsePlayerInvitationLogDtoVoid</returns>
        RootListResponsePlayerInvitationLogDtoVoid FetchInvitationLogs(string playerUid);

        /// <summary>
        /// Get invitation logs
        /// </summary>
        /// <remarks>
        ///          Get invitation logs.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <returns>ApiResponse of RootListResponsePlayerInvitationLogDtoVoid</returns>
        ApiResponse<RootListResponsePlayerInvitationLogDtoVoid> FetchInvitationLogsWithHttpInfo(string playerUid);
        /// <summary>
        /// Get player data
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <returns>RootPublicPlayerDto</returns>
        RootPublicPlayerDto GetPlayerGameData(string playerUid);

        /// <summary>
        /// Get player data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <returns>ApiResponse of RootPublicPlayerDto</returns>
        ApiResponse<RootPublicPlayerDto> GetPlayerGameDataWithHttpInfo(string playerUid);
        /// <summary>
        /// Get current player information
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RootPrivatePlayerDto</returns>
        RootPrivatePlayerDto GetPlayers();

        /// <summary>
        /// Get current player information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RootPrivatePlayerDto</returns>
        ApiResponse<RootPrivatePlayerDto> GetPlayersWithHttpInfo();
        /// <summary>
        /// Query player game data
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerQueryGameDataReqDto"></param>
        /// <returns>RootPlayerQueryGameDataResDto</returns>
        RootPlayerQueryGameDataResDto QueryPlayerGameData(string playerUid, PlayerQueryGameDataReqDto playerQueryGameDataReqDto);

        /// <summary>
        /// Query player game data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerQueryGameDataReqDto"></param>
        /// <returns>ApiResponse of RootPlayerQueryGameDataResDto</returns>
        ApiResponse<RootPlayerQueryGameDataResDto> QueryPlayerGameDataWithHttpInfo(string playerUid, PlayerQueryGameDataReqDto playerQueryGameDataReqDto);
        /// <summary>
        /// Redeem an invitation code
        /// </summary>
        /// <remarks>
        ///          Register an invitation code.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerRedeemInvitationCodeReqDto"></param>
        /// <returns>RootVoid</returns>
        RootVoid RedeemInvitationCode(string playerUid, PlayerRedeemInvitationCodeReqDto playerRedeemInvitationCodeReqDto);

        /// <summary>
        /// Redeem an invitation code
        /// </summary>
        /// <remarks>
        ///          Register an invitation code.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerRedeemInvitationCodeReqDto"></param>
        /// <returns>ApiResponse of RootVoid</returns>
        ApiResponse<RootVoid> RedeemInvitationCodeWithHttpInfo(string playerUid, PlayerRedeemInvitationCodeReqDto playerRedeemInvitationCodeReqDto);
        /// <summary>
        /// Send a mail to a player
        /// </summary>
        /// <remarks>
        ///  Send a mail to the current player. NOTE: - 19-Aug-2024: Only the current player can be the recipient of the mail.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerMailSendReqDto"></param>
        /// <returns>RootPlayerMailDto</returns>
        RootPlayerMailDto SendMail(string playerUid, PlayerMailSendReqDto playerMailSendReqDto);

        /// <summary>
        /// Send a mail to a player
        /// </summary>
        /// <remarks>
        ///  Send a mail to the current player. NOTE: - 19-Aug-2024: Only the current player can be the recipient of the mail.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerMailSendReqDto"></param>
        /// <returns>ApiResponse of RootPlayerMailDto</returns>
        ApiResponse<RootPlayerMailDto> SendMailWithHttpInfo(string playerUid, PlayerMailSendReqDto playerMailSendReqDto);
        /// <summary>
        /// Set player gameData
        /// </summary>
        /// <remarks>
        ///          Set player gameData         - e.g.           - Existing gameData: &#x60;{\&quot;level\&quot;: 1, \&quot;exp\&quot;: 100, \&quot;inventory\&quot;: {\&quot;gold\&quot;: 1000, \&quot;items\&quot;: [\&quot;item1\&quot;, \&quot;item2\&quot;], \&quot;equipment\&quot;: {\&quot;weapon\&quot;: \&quot;sword\&quot;, \&quot;armor\&quot;: \&quot;leather\&quot;}}}&#x60;           - Request body: &#x60;{\&quot;data\&quot;: [{\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;gold\&quot;], \&quot;value\&quot;: 1500}, {\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;items\&quot;], \&quot;value\&quot;: [\&quot;item1\&quot;]}, {\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;equipment\&quot;, \&quot;armor\&quot;], \&quot;value\&quot;: \&quot;metal\&quot;}]}&#x60;           - Updated gameData: &#x60;{\&quot;level\&quot;: 1, \&quot;exp\&quot;: 100, \&quot;inventory\&quot;: {\&quot;gold\&quot;: 1500, \&quot;items\&quot;: [\&quot;item1\&quot;], \&quot;equipment\&quot;: {\&quot;weapon\&quot;: \&quot;sword\&quot;, \&quot;armor\&quot;: \&quot;metal\&quot;}}}&#x60;         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerUpdateGameDataReqDto"></param>
        /// <returns>RootPrivatePlayerDto</returns>
        RootPrivatePlayerDto SetPlayerGameData(string playerUid, PlayerUpdateGameDataReqDto playerUpdateGameDataReqDto);

        /// <summary>
        /// Set player gameData
        /// </summary>
        /// <remarks>
        ///          Set player gameData         - e.g.           - Existing gameData: &#x60;{\&quot;level\&quot;: 1, \&quot;exp\&quot;: 100, \&quot;inventory\&quot;: {\&quot;gold\&quot;: 1000, \&quot;items\&quot;: [\&quot;item1\&quot;, \&quot;item2\&quot;], \&quot;equipment\&quot;: {\&quot;weapon\&quot;: \&quot;sword\&quot;, \&quot;armor\&quot;: \&quot;leather\&quot;}}}&#x60;           - Request body: &#x60;{\&quot;data\&quot;: [{\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;gold\&quot;], \&quot;value\&quot;: 1500}, {\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;items\&quot;], \&quot;value\&quot;: [\&quot;item1\&quot;]}, {\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;equipment\&quot;, \&quot;armor\&quot;], \&quot;value\&quot;: \&quot;metal\&quot;}]}&#x60;           - Updated gameData: &#x60;{\&quot;level\&quot;: 1, \&quot;exp\&quot;: 100, \&quot;inventory\&quot;: {\&quot;gold\&quot;: 1500, \&quot;items\&quot;: [\&quot;item1\&quot;], \&quot;equipment\&quot;: {\&quot;weapon\&quot;: \&quot;sword\&quot;, \&quot;armor\&quot;: \&quot;metal\&quot;}}}&#x60;         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerUpdateGameDataReqDto"></param>
        /// <returns>ApiResponse of RootPrivatePlayerDto</returns>
        ApiResponse<RootPrivatePlayerDto> SetPlayerGameDataWithHttpInfo(string playerUid, PlayerUpdateGameDataReqDto playerUpdateGameDataReqDto);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Block access to current player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockCurrentPlayerReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootVoid</returns>
        System.Threading.Tasks.Task<RootVoid> BlockAccessAsync(BlockCurrentPlayerReqDto blockCurrentPlayerReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Block access to current player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockCurrentPlayerReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootVoid)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootVoid>> BlockAccessWithHttpInfoAsync(BlockCurrentPlayerReqDto blockCurrentPlayerReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit current player data
        /// </summary>
        /// <remarks>
        ///          Edit current player data.         It overwrites the player data with the request body.         If you want to edit player&#39;s game data, use &#x60;/players/{playerUid}/game-data&#x60; endpoint.     
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUpdateReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPrivatePlayerDto</returns>
        System.Threading.Tasks.Task<RootPrivatePlayerDto> EditPlayersAsync(PlayerUpdateReqDto playerUpdateReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit current player data
        /// </summary>
        /// <remarks>
        ///          Edit current player data.         It overwrites the player data with the request body.         If you want to edit player&#39;s game data, use &#x60;/players/{playerUid}/game-data&#x60; endpoint.     
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUpdateReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPrivatePlayerDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootPrivatePlayerDto>> EditPlayersWithHttpInfoAsync(PlayerUpdateReqDto playerUpdateReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get invitation logs
        /// </summary>
        /// <remarks>
        ///          Get invitation logs.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponsePlayerInvitationLogDtoVoid</returns>
        System.Threading.Tasks.Task<RootListResponsePlayerInvitationLogDtoVoid> FetchInvitationLogsAsync(string playerUid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get invitation logs
        /// </summary>
        /// <remarks>
        ///          Get invitation logs.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponsePlayerInvitationLogDtoVoid)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootListResponsePlayerInvitationLogDtoVoid>> FetchInvitationLogsWithHttpInfoAsync(string playerUid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get player data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPublicPlayerDto</returns>
        System.Threading.Tasks.Task<RootPublicPlayerDto> GetPlayerGameDataAsync(string playerUid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get player data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPublicPlayerDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootPublicPlayerDto>> GetPlayerGameDataWithHttpInfoAsync(string playerUid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get current player information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPrivatePlayerDto</returns>
        System.Threading.Tasks.Task<RootPrivatePlayerDto> GetPlayersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get current player information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPrivatePlayerDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootPrivatePlayerDto>> GetPlayersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Query player game data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerQueryGameDataReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPlayerQueryGameDataResDto</returns>
        System.Threading.Tasks.Task<RootPlayerQueryGameDataResDto> QueryPlayerGameDataAsync(string playerUid, PlayerQueryGameDataReqDto playerQueryGameDataReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Query player game data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerQueryGameDataReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPlayerQueryGameDataResDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootPlayerQueryGameDataResDto>> QueryPlayerGameDataWithHttpInfoAsync(string playerUid, PlayerQueryGameDataReqDto playerQueryGameDataReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Redeem an invitation code
        /// </summary>
        /// <remarks>
        ///          Register an invitation code.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerRedeemInvitationCodeReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootVoid</returns>
        System.Threading.Tasks.Task<RootVoid> RedeemInvitationCodeAsync(string playerUid, PlayerRedeemInvitationCodeReqDto playerRedeemInvitationCodeReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Redeem an invitation code
        /// </summary>
        /// <remarks>
        ///          Register an invitation code.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerRedeemInvitationCodeReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootVoid)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootVoid>> RedeemInvitationCodeWithHttpInfoAsync(string playerUid, PlayerRedeemInvitationCodeReqDto playerRedeemInvitationCodeReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send a mail to a player
        /// </summary>
        /// <remarks>
        ///  Send a mail to the current player. NOTE: - 19-Aug-2024: Only the current player can be the recipient of the mail.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerMailSendReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPlayerMailDto</returns>
        System.Threading.Tasks.Task<RootPlayerMailDto> SendMailAsync(string playerUid, PlayerMailSendReqDto playerMailSendReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send a mail to a player
        /// </summary>
        /// <remarks>
        ///  Send a mail to the current player. NOTE: - 19-Aug-2024: Only the current player can be the recipient of the mail.         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerMailSendReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPlayerMailDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootPlayerMailDto>> SendMailWithHttpInfoAsync(string playerUid, PlayerMailSendReqDto playerMailSendReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set player gameData
        /// </summary>
        /// <remarks>
        ///          Set player gameData         - e.g.           - Existing gameData: &#x60;{\&quot;level\&quot;: 1, \&quot;exp\&quot;: 100, \&quot;inventory\&quot;: {\&quot;gold\&quot;: 1000, \&quot;items\&quot;: [\&quot;item1\&quot;, \&quot;item2\&quot;], \&quot;equipment\&quot;: {\&quot;weapon\&quot;: \&quot;sword\&quot;, \&quot;armor\&quot;: \&quot;leather\&quot;}}}&#x60;           - Request body: &#x60;{\&quot;data\&quot;: [{\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;gold\&quot;], \&quot;value\&quot;: 1500}, {\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;items\&quot;], \&quot;value\&quot;: [\&quot;item1\&quot;]}, {\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;equipment\&quot;, \&quot;armor\&quot;], \&quot;value\&quot;: \&quot;metal\&quot;}]}&#x60;           - Updated gameData: &#x60;{\&quot;level\&quot;: 1, \&quot;exp\&quot;: 100, \&quot;inventory\&quot;: {\&quot;gold\&quot;: 1500, \&quot;items\&quot;: [\&quot;item1\&quot;], \&quot;equipment\&quot;: {\&quot;weapon\&quot;: \&quot;sword\&quot;, \&quot;armor\&quot;: \&quot;metal\&quot;}}}&#x60;         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerUpdateGameDataReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPrivatePlayerDto</returns>
        System.Threading.Tasks.Task<RootPrivatePlayerDto> SetPlayerGameDataAsync(string playerUid, PlayerUpdateGameDataReqDto playerUpdateGameDataReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set player gameData
        /// </summary>
        /// <remarks>
        ///          Set player gameData         - e.g.           - Existing gameData: &#x60;{\&quot;level\&quot;: 1, \&quot;exp\&quot;: 100, \&quot;inventory\&quot;: {\&quot;gold\&quot;: 1000, \&quot;items\&quot;: [\&quot;item1\&quot;, \&quot;item2\&quot;], \&quot;equipment\&quot;: {\&quot;weapon\&quot;: \&quot;sword\&quot;, \&quot;armor\&quot;: \&quot;leather\&quot;}}}&#x60;           - Request body: &#x60;{\&quot;data\&quot;: [{\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;gold\&quot;], \&quot;value\&quot;: 1500}, {\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;items\&quot;], \&quot;value\&quot;: [\&quot;item1\&quot;]}, {\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;equipment\&quot;, \&quot;armor\&quot;], \&quot;value\&quot;: \&quot;metal\&quot;}]}&#x60;           - Updated gameData: &#x60;{\&quot;level\&quot;: 1, \&quot;exp\&quot;: 100, \&quot;inventory\&quot;: {\&quot;gold\&quot;: 1500, \&quot;items\&quot;: [\&quot;item1\&quot;], \&quot;equipment\&quot;: {\&quot;weapon\&quot;: \&quot;sword\&quot;, \&quot;armor\&quot;: \&quot;metal\&quot;}}}&#x60;         
        /// </remarks>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerUpdateGameDataReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPrivatePlayerDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RootPrivatePlayerDto>> SetPlayerGameDataWithHttpInfoAsync(string playerUid, PlayerUpdateGameDataReqDto playerUpdateGameDataReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayerApi : IPlayerApiSync, IPlayerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlayerApi : IDisposable, IPlayerApi
    {
        private Alohacorp.Durian.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public PlayerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public PlayerApi(string basePath)
        {
            this.Configuration = Alohacorp.Durian.Client.Configuration.MergeConfigurations(
                Alohacorp.Durian.Client.GlobalConfiguration.Instance,
                new Alohacorp.Durian.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Alohacorp.Durian.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Alohacorp.Durian.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public PlayerApi(Alohacorp.Durian.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alohacorp.Durian.Client.Configuration.MergeConfigurations(
                Alohacorp.Durian.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Alohacorp.Durian.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Alohacorp.Durian.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public PlayerApi(Alohacorp.Durian.Client.ISynchronousClient client, Alohacorp.Durian.Client.IAsynchronousClient asyncClient, Alohacorp.Durian.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alohacorp.Durian.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Alohacorp.Durian.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alohacorp.Durian.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alohacorp.Durian.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alohacorp.Durian.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alohacorp.Durian.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Block access to current player 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockCurrentPlayerReqDto"></param>
        /// <returns>RootVoid</returns>
        public RootVoid BlockAccess(BlockCurrentPlayerReqDto blockCurrentPlayerReqDto)
        {
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = BlockAccessWithHttpInfo(blockCurrentPlayerReqDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Block access to current player 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockCurrentPlayerReqDto"></param>
        /// <returns>ApiResponse of RootVoid</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootVoid> BlockAccessWithHttpInfo(BlockCurrentPlayerReqDto blockCurrentPlayerReqDto)
        {
            // verify the required parameter 'blockCurrentPlayerReqDto' is set
            if (blockCurrentPlayerReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'blockCurrentPlayerReqDto' when calling PlayerApi->BlockAccess");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = blockCurrentPlayerReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RootVoid>($"/v1/players/block-access", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Block access to current player 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockCurrentPlayerReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootVoid</returns>
        public async System.Threading.Tasks.Task<RootVoid> BlockAccessAsync(BlockCurrentPlayerReqDto blockCurrentPlayerReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = BlockAccessWithHttpInfoAsync(blockCurrentPlayerReqDto, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Block access to current player 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockCurrentPlayerReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootVoid)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootVoid>> BlockAccessWithHttpInfoAsync(BlockCurrentPlayerReqDto blockCurrentPlayerReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockCurrentPlayerReqDto' is set
            if (blockCurrentPlayerReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'blockCurrentPlayerReqDto' when calling PlayerApi->BlockAccess");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = blockCurrentPlayerReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<RootVoid>($"/v1/players/block-access", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit current player data          Edit current player data.         It overwrites the player data with the request body.         If you want to edit player&#39;s game data, use &#x60;/players/{playerUid}/game-data&#x60; endpoint.     
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUpdateReqDto"></param>
        /// <returns>RootPrivatePlayerDto</returns>
        public RootPrivatePlayerDto EditPlayers(PlayerUpdateReqDto playerUpdateReqDto)
        {
            Alohacorp.Durian.Client.ApiResponse<RootPrivatePlayerDto> localVarResponse = EditPlayersWithHttpInfo(playerUpdateReqDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit current player data          Edit current player data.         It overwrites the player data with the request body.         If you want to edit player&#39;s game data, use &#x60;/players/{playerUid}/game-data&#x60; endpoint.     
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUpdateReqDto"></param>
        /// <returns>ApiResponse of RootPrivatePlayerDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootPrivatePlayerDto> EditPlayersWithHttpInfo(PlayerUpdateReqDto playerUpdateReqDto)
        {
            // verify the required parameter 'playerUpdateReqDto' is set
            if (playerUpdateReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUpdateReqDto' when calling PlayerApi->EditPlayers");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = playerUpdateReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<RootPrivatePlayerDto>($"/v1/players", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditPlayers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit current player data          Edit current player data.         It overwrites the player data with the request body.         If you want to edit player&#39;s game data, use &#x60;/players/{playerUid}/game-data&#x60; endpoint.     
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUpdateReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPrivatePlayerDto</returns>
        public async System.Threading.Tasks.Task<RootPrivatePlayerDto> EditPlayersAsync(PlayerUpdateReqDto playerUpdateReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = EditPlayersWithHttpInfoAsync(playerUpdateReqDto, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootPrivatePlayerDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootPrivatePlayerDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit current player data          Edit current player data.         It overwrites the player data with the request body.         If you want to edit player&#39;s game data, use &#x60;/players/{playerUid}/game-data&#x60; endpoint.     
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUpdateReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPrivatePlayerDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootPrivatePlayerDto>> EditPlayersWithHttpInfoAsync(PlayerUpdateReqDto playerUpdateReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'playerUpdateReqDto' is set
            if (playerUpdateReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUpdateReqDto' when calling PlayerApi->EditPlayers");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = playerUpdateReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<RootPrivatePlayerDto>($"/v1/players", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditPlayers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get invitation logs          Get invitation logs.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <returns>RootListResponsePlayerInvitationLogDtoVoid</returns>
        public RootListResponsePlayerInvitationLogDtoVoid FetchInvitationLogs(string playerUid)
        {
            Alohacorp.Durian.Client.ApiResponse<RootListResponsePlayerInvitationLogDtoVoid> localVarResponse = FetchInvitationLogsWithHttpInfo(playerUid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get invitation logs          Get invitation logs.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <returns>ApiResponse of RootListResponsePlayerInvitationLogDtoVoid</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootListResponsePlayerInvitationLogDtoVoid> FetchInvitationLogsWithHttpInfo(string playerUid)
        {
            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling PlayerApi->FetchInvitationLogs");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootListResponsePlayerInvitationLogDtoVoid>($"/v1/players/{playerUid}/invitation-logs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchInvitationLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get invitation logs          Get invitation logs.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootListResponsePlayerInvitationLogDtoVoid</returns>
        public async System.Threading.Tasks.Task<RootListResponsePlayerInvitationLogDtoVoid> FetchInvitationLogsAsync(string playerUid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = FetchInvitationLogsWithHttpInfoAsync(playerUid, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootListResponsePlayerInvitationLogDtoVoid> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootListResponsePlayerInvitationLogDtoVoid> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get invitation logs          Get invitation logs.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootListResponsePlayerInvitationLogDtoVoid)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootListResponsePlayerInvitationLogDtoVoid>> FetchInvitationLogsWithHttpInfoAsync(string playerUid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling PlayerApi->FetchInvitationLogs");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootListResponsePlayerInvitationLogDtoVoid>($"/v1/players/{playerUid}/invitation-logs", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchInvitationLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get player data 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <returns>RootPublicPlayerDto</returns>
        public RootPublicPlayerDto GetPlayerGameData(string playerUid)
        {
            Alohacorp.Durian.Client.ApiResponse<RootPublicPlayerDto> localVarResponse = GetPlayerGameDataWithHttpInfo(playerUid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get player data 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <returns>ApiResponse of RootPublicPlayerDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootPublicPlayerDto> GetPlayerGameDataWithHttpInfo(string playerUid)
        {
            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling PlayerApi->GetPlayerGameData");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootPublicPlayerDto>($"/v1/players/{playerUid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerGameData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get player data 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPublicPlayerDto</returns>
        public async System.Threading.Tasks.Task<RootPublicPlayerDto> GetPlayerGameDataAsync(string playerUid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetPlayerGameDataWithHttpInfoAsync(playerUid, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootPublicPlayerDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootPublicPlayerDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get player data 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPublicPlayerDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootPublicPlayerDto>> GetPlayerGameDataWithHttpInfoAsync(string playerUid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling PlayerApi->GetPlayerGameData");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootPublicPlayerDto>($"/v1/players/{playerUid}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerGameData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get current player information 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RootPrivatePlayerDto</returns>
        public RootPrivatePlayerDto GetPlayers()
        {
            Alohacorp.Durian.Client.ApiResponse<RootPrivatePlayerDto> localVarResponse = GetPlayersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get current player information 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RootPrivatePlayerDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootPrivatePlayerDto> GetPlayersWithHttpInfo()
        {
            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RootPrivatePlayerDto>($"/v1/players", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get current player information 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPrivatePlayerDto</returns>
        public async System.Threading.Tasks.Task<RootPrivatePlayerDto> GetPlayersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetPlayersWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootPrivatePlayerDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootPrivatePlayerDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get current player information 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPrivatePlayerDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootPrivatePlayerDto>> GetPlayersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<RootPrivatePlayerDto>($"/v1/players", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query player game data 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerQueryGameDataReqDto"></param>
        /// <returns>RootPlayerQueryGameDataResDto</returns>
        public RootPlayerQueryGameDataResDto QueryPlayerGameData(string playerUid, PlayerQueryGameDataReqDto playerQueryGameDataReqDto)
        {
            Alohacorp.Durian.Client.ApiResponse<RootPlayerQueryGameDataResDto> localVarResponse = QueryPlayerGameDataWithHttpInfo(playerUid, playerQueryGameDataReqDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query player game data 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerQueryGameDataReqDto"></param>
        /// <returns>ApiResponse of RootPlayerQueryGameDataResDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootPlayerQueryGameDataResDto> QueryPlayerGameDataWithHttpInfo(string playerUid, PlayerQueryGameDataReqDto playerQueryGameDataReqDto)
        {
            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling PlayerApi->QueryPlayerGameData");

            // verify the required parameter 'playerQueryGameDataReqDto' is set
            if (playerQueryGameDataReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerQueryGameDataReqDto' when calling PlayerApi->QueryPlayerGameData");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter
            localVarRequestOptions.Data = playerQueryGameDataReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RootPlayerQueryGameDataResDto>($"/v1/players/{playerUid}/game-data/query", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryPlayerGameData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query player game data 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerQueryGameDataReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPlayerQueryGameDataResDto</returns>
        public async System.Threading.Tasks.Task<RootPlayerQueryGameDataResDto> QueryPlayerGameDataAsync(string playerUid, PlayerQueryGameDataReqDto playerQueryGameDataReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = QueryPlayerGameDataWithHttpInfoAsync(playerUid, playerQueryGameDataReqDto, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootPlayerQueryGameDataResDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootPlayerQueryGameDataResDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query player game data 
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerQueryGameDataReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPlayerQueryGameDataResDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootPlayerQueryGameDataResDto>> QueryPlayerGameDataWithHttpInfoAsync(string playerUid, PlayerQueryGameDataReqDto playerQueryGameDataReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling PlayerApi->QueryPlayerGameData");

            // verify the required parameter 'playerQueryGameDataReqDto' is set
            if (playerQueryGameDataReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerQueryGameDataReqDto' when calling PlayerApi->QueryPlayerGameData");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter
            localVarRequestOptions.Data = playerQueryGameDataReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<RootPlayerQueryGameDataResDto>($"/v1/players/{playerUid}/game-data/query", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QueryPlayerGameData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redeem an invitation code          Register an invitation code.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerRedeemInvitationCodeReqDto"></param>
        /// <returns>RootVoid</returns>
        public RootVoid RedeemInvitationCode(string playerUid, PlayerRedeemInvitationCodeReqDto playerRedeemInvitationCodeReqDto)
        {
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = RedeemInvitationCodeWithHttpInfo(playerUid, playerRedeemInvitationCodeReqDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redeem an invitation code          Register an invitation code.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerRedeemInvitationCodeReqDto"></param>
        /// <returns>ApiResponse of RootVoid</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootVoid> RedeemInvitationCodeWithHttpInfo(string playerUid, PlayerRedeemInvitationCodeReqDto playerRedeemInvitationCodeReqDto)
        {
            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling PlayerApi->RedeemInvitationCode");

            // verify the required parameter 'playerRedeemInvitationCodeReqDto' is set
            if (playerRedeemInvitationCodeReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerRedeemInvitationCodeReqDto' when calling PlayerApi->RedeemInvitationCode");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter
            localVarRequestOptions.Data = playerRedeemInvitationCodeReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RootVoid>($"/v1/players/{playerUid}/redeem-invitation-code", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedeemInvitationCode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redeem an invitation code          Register an invitation code.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerRedeemInvitationCodeReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootVoid</returns>
        public async System.Threading.Tasks.Task<RootVoid> RedeemInvitationCodeAsync(string playerUid, PlayerRedeemInvitationCodeReqDto playerRedeemInvitationCodeReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = RedeemInvitationCodeWithHttpInfoAsync(playerUid, playerRedeemInvitationCodeReqDto, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootVoid> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redeem an invitation code          Register an invitation code.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerRedeemInvitationCodeReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootVoid)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootVoid>> RedeemInvitationCodeWithHttpInfoAsync(string playerUid, PlayerRedeemInvitationCodeReqDto playerRedeemInvitationCodeReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling PlayerApi->RedeemInvitationCode");

            // verify the required parameter 'playerRedeemInvitationCodeReqDto' is set
            if (playerRedeemInvitationCodeReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerRedeemInvitationCodeReqDto' when calling PlayerApi->RedeemInvitationCode");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter
            localVarRequestOptions.Data = playerRedeemInvitationCodeReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<RootVoid>($"/v1/players/{playerUid}/redeem-invitation-code", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedeemInvitationCode", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a mail to a player  Send a mail to the current player. NOTE: - 19-Aug-2024: Only the current player can be the recipient of the mail.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerMailSendReqDto"></param>
        /// <returns>RootPlayerMailDto</returns>
        public RootPlayerMailDto SendMail(string playerUid, PlayerMailSendReqDto playerMailSendReqDto)
        {
            Alohacorp.Durian.Client.ApiResponse<RootPlayerMailDto> localVarResponse = SendMailWithHttpInfo(playerUid, playerMailSendReqDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send a mail to a player  Send a mail to the current player. NOTE: - 19-Aug-2024: Only the current player can be the recipient of the mail.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerMailSendReqDto"></param>
        /// <returns>ApiResponse of RootPlayerMailDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootPlayerMailDto> SendMailWithHttpInfo(string playerUid, PlayerMailSendReqDto playerMailSendReqDto)
        {
            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling PlayerApi->SendMail");

            // verify the required parameter 'playerMailSendReqDto' is set
            if (playerMailSendReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerMailSendReqDto' when calling PlayerApi->SendMail");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter
            localVarRequestOptions.Data = playerMailSendReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RootPlayerMailDto>($"/v1/players/{playerUid}/mails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendMail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a mail to a player  Send a mail to the current player. NOTE: - 19-Aug-2024: Only the current player can be the recipient of the mail.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerMailSendReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPlayerMailDto</returns>
        public async System.Threading.Tasks.Task<RootPlayerMailDto> SendMailAsync(string playerUid, PlayerMailSendReqDto playerMailSendReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SendMailWithHttpInfoAsync(playerUid, playerMailSendReqDto, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootPlayerMailDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootPlayerMailDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send a mail to a player  Send a mail to the current player. NOTE: - 19-Aug-2024: Only the current player can be the recipient of the mail.         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerMailSendReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPlayerMailDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootPlayerMailDto>> SendMailWithHttpInfoAsync(string playerUid, PlayerMailSendReqDto playerMailSendReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling PlayerApi->SendMail");

            // verify the required parameter 'playerMailSendReqDto' is set
            if (playerMailSendReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerMailSendReqDto' when calling PlayerApi->SendMail");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter
            localVarRequestOptions.Data = playerMailSendReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<RootPlayerMailDto>($"/v1/players/{playerUid}/mails", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendMail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set player gameData          Set player gameData         - e.g.           - Existing gameData: &#x60;{\&quot;level\&quot;: 1, \&quot;exp\&quot;: 100, \&quot;inventory\&quot;: {\&quot;gold\&quot;: 1000, \&quot;items\&quot;: [\&quot;item1\&quot;, \&quot;item2\&quot;], \&quot;equipment\&quot;: {\&quot;weapon\&quot;: \&quot;sword\&quot;, \&quot;armor\&quot;: \&quot;leather\&quot;}}}&#x60;           - Request body: &#x60;{\&quot;data\&quot;: [{\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;gold\&quot;], \&quot;value\&quot;: 1500}, {\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;items\&quot;], \&quot;value\&quot;: [\&quot;item1\&quot;]}, {\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;equipment\&quot;, \&quot;armor\&quot;], \&quot;value\&quot;: \&quot;metal\&quot;}]}&#x60;           - Updated gameData: &#x60;{\&quot;level\&quot;: 1, \&quot;exp\&quot;: 100, \&quot;inventory\&quot;: {\&quot;gold\&quot;: 1500, \&quot;items\&quot;: [\&quot;item1\&quot;], \&quot;equipment\&quot;: {\&quot;weapon\&quot;: \&quot;sword\&quot;, \&quot;armor\&quot;: \&quot;metal\&quot;}}}&#x60;         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerUpdateGameDataReqDto"></param>
        /// <returns>RootPrivatePlayerDto</returns>
        public RootPrivatePlayerDto SetPlayerGameData(string playerUid, PlayerUpdateGameDataReqDto playerUpdateGameDataReqDto)
        {
            Alohacorp.Durian.Client.ApiResponse<RootPrivatePlayerDto> localVarResponse = SetPlayerGameDataWithHttpInfo(playerUid, playerUpdateGameDataReqDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set player gameData          Set player gameData         - e.g.           - Existing gameData: &#x60;{\&quot;level\&quot;: 1, \&quot;exp\&quot;: 100, \&quot;inventory\&quot;: {\&quot;gold\&quot;: 1000, \&quot;items\&quot;: [\&quot;item1\&quot;, \&quot;item2\&quot;], \&quot;equipment\&quot;: {\&quot;weapon\&quot;: \&quot;sword\&quot;, \&quot;armor\&quot;: \&quot;leather\&quot;}}}&#x60;           - Request body: &#x60;{\&quot;data\&quot;: [{\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;gold\&quot;], \&quot;value\&quot;: 1500}, {\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;items\&quot;], \&quot;value\&quot;: [\&quot;item1\&quot;]}, {\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;equipment\&quot;, \&quot;armor\&quot;], \&quot;value\&quot;: \&quot;metal\&quot;}]}&#x60;           - Updated gameData: &#x60;{\&quot;level\&quot;: 1, \&quot;exp\&quot;: 100, \&quot;inventory\&quot;: {\&quot;gold\&quot;: 1500, \&quot;items\&quot;: [\&quot;item1\&quot;], \&quot;equipment\&quot;: {\&quot;weapon\&quot;: \&quot;sword\&quot;, \&quot;armor\&quot;: \&quot;metal\&quot;}}}&#x60;         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerUpdateGameDataReqDto"></param>
        /// <returns>ApiResponse of RootPrivatePlayerDto</returns>
        public Alohacorp.Durian.Client.ApiResponse<RootPrivatePlayerDto> SetPlayerGameDataWithHttpInfo(string playerUid, PlayerUpdateGameDataReqDto playerUpdateGameDataReqDto)
        {
            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling PlayerApi->SetPlayerGameData");

            // verify the required parameter 'playerUpdateGameDataReqDto' is set
            if (playerUpdateGameDataReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUpdateGameDataReqDto' when calling PlayerApi->SetPlayerGameData");

            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter
            localVarRequestOptions.Data = playerUpdateGameDataReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<RootPrivatePlayerDto>($"/v1/players/{playerUid}/game-data", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPlayerGameData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set player gameData          Set player gameData         - e.g.           - Existing gameData: &#x60;{\&quot;level\&quot;: 1, \&quot;exp\&quot;: 100, \&quot;inventory\&quot;: {\&quot;gold\&quot;: 1000, \&quot;items\&quot;: [\&quot;item1\&quot;, \&quot;item2\&quot;], \&quot;equipment\&quot;: {\&quot;weapon\&quot;: \&quot;sword\&quot;, \&quot;armor\&quot;: \&quot;leather\&quot;}}}&#x60;           - Request body: &#x60;{\&quot;data\&quot;: [{\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;gold\&quot;], \&quot;value\&quot;: 1500}, {\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;items\&quot;], \&quot;value\&quot;: [\&quot;item1\&quot;]}, {\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;equipment\&quot;, \&quot;armor\&quot;], \&quot;value\&quot;: \&quot;metal\&quot;}]}&#x60;           - Updated gameData: &#x60;{\&quot;level\&quot;: 1, \&quot;exp\&quot;: 100, \&quot;inventory\&quot;: {\&quot;gold\&quot;: 1500, \&quot;items\&quot;: [\&quot;item1\&quot;], \&quot;equipment\&quot;: {\&quot;weapon\&quot;: \&quot;sword\&quot;, \&quot;armor\&quot;: \&quot;metal\&quot;}}}&#x60;         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerUpdateGameDataReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RootPrivatePlayerDto</returns>
        public async System.Threading.Tasks.Task<RootPrivatePlayerDto> SetPlayerGameDataAsync(string playerUid, PlayerUpdateGameDataReqDto playerUpdateGameDataReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SetPlayerGameDataWithHttpInfoAsync(playerUid, playerUpdateGameDataReqDto, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Alohacorp.Durian.Client.ApiResponse<RootPrivatePlayerDto> localVarResponse = await task.ConfigureAwait(false);
#else
            Alohacorp.Durian.Client.ApiResponse<RootPrivatePlayerDto> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set player gameData          Set player gameData         - e.g.           - Existing gameData: &#x60;{\&quot;level\&quot;: 1, \&quot;exp\&quot;: 100, \&quot;inventory\&quot;: {\&quot;gold\&quot;: 1000, \&quot;items\&quot;: [\&quot;item1\&quot;, \&quot;item2\&quot;], \&quot;equipment\&quot;: {\&quot;weapon\&quot;: \&quot;sword\&quot;, \&quot;armor\&quot;: \&quot;leather\&quot;}}}&#x60;           - Request body: &#x60;{\&quot;data\&quot;: [{\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;gold\&quot;], \&quot;value\&quot;: 1500}, {\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;items\&quot;], \&quot;value\&quot;: [\&quot;item1\&quot;]}, {\&quot;path\&quot;: [\&quot;inventory\&quot;, \&quot;equipment\&quot;, \&quot;armor\&quot;], \&quot;value\&quot;: \&quot;metal\&quot;}]}&#x60;           - Updated gameData: &#x60;{\&quot;level\&quot;: 1, \&quot;exp\&quot;: 100, \&quot;inventory\&quot;: {\&quot;gold\&quot;: 1500, \&quot;items\&quot;: [\&quot;item1\&quot;], \&quot;equipment\&quot;: {\&quot;weapon\&quot;: \&quot;sword\&quot;, \&quot;armor\&quot;: \&quot;metal\&quot;}}}&#x60;         
        /// </summary>
        /// <exception cref="Alohacorp.Durian.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUid">The player uid</param>
        /// <param name="playerUpdateGameDataReqDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RootPrivatePlayerDto)</returns>
        public async System.Threading.Tasks.Task<Alohacorp.Durian.Client.ApiResponse<RootPrivatePlayerDto>> SetPlayerGameDataWithHttpInfoAsync(string playerUid, PlayerUpdateGameDataReqDto playerUpdateGameDataReqDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'playerUid' is set
            if (playerUid == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUid' when calling PlayerApi->SetPlayerGameData");

            // verify the required parameter 'playerUpdateGameDataReqDto' is set
            if (playerUpdateGameDataReqDto == null)
                throw new Alohacorp.Durian.Client.ApiException(400, "Missing required parameter 'playerUpdateGameDataReqDto' when calling PlayerApi->SetPlayerGameData");


            Alohacorp.Durian.Client.RequestOptions localVarRequestOptions = new Alohacorp.Durian.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = Alohacorp.Durian.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Alohacorp.Durian.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("playerUid", Alohacorp.Durian.Client.ClientUtils.ParameterToString(playerUid)); // path parameter
            localVarRequestOptions.Data = playerUpdateGameDataReqDto;

            // authentication (firebaseAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<RootPrivatePlayerDto>($"/v1/players/{playerUid}/game-data", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPlayerGameData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
