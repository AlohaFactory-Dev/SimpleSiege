// 에디터 코드지만 Odin으로 사용할 수 있도록 Runtime 폴더에 위치시키고 #if UNITY_EDITOR 처리
#if UNITY_EDITOR
using System;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine.Assertions;

namespace Aloha.Coconut
{
    public class EnumGenerator<TSource, TEnum> where TEnum : Enum
    {
        private string _namespace = "Aloha.Coconut";
        private string _generatorClassName = "EnumGenerator";
        private string _filePath;
        private bool _isFlag;
        private List<TSource> _sources;
        private Func<TSource, string> _nameSelector;
        private Func<TSource, int> _intValueSelector;
        
        private EnumGenerator() {}
        
        public static EnumGenerator<TSource, TEnum> New()
        {
            return new EnumGenerator<TSource, TEnum>();
        }
        
        public EnumGenerator<TSource, TEnum> SetGeneratorClass(string generatorClass)
        {
            _generatorClassName = generatorClass;
            return this;
        }
        
        public EnumGenerator<TSource, TEnum> SetNamespace(string @namespace)
        {
            _namespace = @namespace;
            return this;
        }
        
        public EnumGenerator<TSource, TEnum> SetFilePath(string filePath)
        {
            _filePath = filePath;
            return this;
        }
        
        public EnumGenerator<TSource, TEnum> SetIsFlag(bool isFlag)
        {
            _isFlag = isFlag;
            return this;
        }
        
        public EnumGenerator<TSource, TEnum> SetSources(List<TSource> sources)
        {
            _sources = sources;
            return this;
        }
        
        public EnumGenerator<TSource, TEnum> SetNameSelector(Func<TSource, string> nameSelector)
        {
            _nameSelector = nameSelector;
            return this;
        }
        
        public EnumGenerator<TSource, TEnum> SetIntValueSelector(Func<TSource, int> intValueSelector)
        {
            _intValueSelector = intValueSelector;
            return this;
        }

        public void Generate()
        {
            Assert.IsNotNull(_filePath);
            Assert.IsNotNull(_sources);
            Assert.IsNotNull(_nameSelector);
            Assert.IsNotNull(_intValueSelector);

            var intHashSet = new HashSet<int>();
            var content = "";
            if(_isFlag) content += "using System;\n\n";
            content += $"// This file is auto-generated by {_generatorClassName ?? "EnumGenerator"}\n";
            content += $"namespace {_namespace}\n{{\n";
            if (_isFlag) content += "    [Flags]\n";
            content += $"    public enum {typeof(TEnum).Name}\n    {{\n";
            
            foreach (var source in _sources)
            {
                var name = _nameSelector(source);
                if (name.Contains(" "))
                {
                    EditorUtility.DisplayDialog("Error", $"{name}이 공백을 포함하고 있습니다. 공백을 지워주세요.", "OK");
                    return;
                }
                
                if(string.IsNullOrEmpty(name)) continue;
                if(char.IsDigit(name[0])) continue;
                
                var intValue = _intValueSelector(source);
                Assert.IsFalse(intHashSet.Contains(intValue), $"Duplicate value: {intValue}");
                content += $"        {_nameSelector(source)} = {intValue},\n";
                intHashSet.Add(intValue);
            }

            content += "    }\n}";
            
            System.IO.File.WriteAllText(_filePath, content);
            AssetDatabase.ImportAsset(_filePath);
        }
    }
}

#endif